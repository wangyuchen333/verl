2025-04-24 05:14:52,427	INFO worker.py:1832 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8266 [39m[22m
[36m(TaskRunner pid=217476)[0m {'actor_rollout_ref': {'actor': {'checkpoint': {'contents': ['model',
[36m(TaskRunner pid=217476)[0m                                                              'optimizer',
[36m(TaskRunner pid=217476)[0m                                                              'extra']},
[36m(TaskRunner pid=217476)[0m                                  'clip_ratio': 0.2,
[36m(TaskRunner pid=217476)[0m                                  'clip_ratio_c': 3.0,
[36m(TaskRunner pid=217476)[0m                                  'clip_ratio_high': 0.2,
[36m(TaskRunner pid=217476)[0m                                  'clip_ratio_low': 0.2,
[36m(TaskRunner pid=217476)[0m                                  'entropy_coeff': 0,
[36m(TaskRunner pid=217476)[0m                                  'fsdp_config': {'fsdp_size': -1,
[36m(TaskRunner pid=217476)[0m                                                  'optimizer_offload': False,
[36m(TaskRunner pid=217476)[0m                                                  'param_offload': False,
[36m(TaskRunner pid=217476)[0m                                                  'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=217476)[0m                                  'grad_clip': 1.0,
[36m(TaskRunner pid=217476)[0m                                  'kl_loss_coef': 0.001,
[36m(TaskRunner pid=217476)[0m                                  'kl_loss_type': 'low_var_kl',
[36m(TaskRunner pid=217476)[0m                                  'loss_agg_mode': 'token-mean',
[36m(TaskRunner pid=217476)[0m                                  'optim': {'lr': 1e-06,
[36m(TaskRunner pid=217476)[0m                                            'lr_warmup_steps': -1,
[36m(TaskRunner pid=217476)[0m                                            'lr_warmup_steps_ratio': 0.0,
[36m(TaskRunner pid=217476)[0m                                            'min_lr_ratio': None,
[36m(TaskRunner pid=217476)[0m                                            'total_training_steps': -1,
[36m(TaskRunner pid=217476)[0m                                            'warmup_style': 'constant',
[36m(TaskRunner pid=217476)[0m                                            'weight_decay': 0.01},
[36m(TaskRunner pid=217476)[0m                                  'ppo_epochs': 1,
[36m(TaskRunner pid=217476)[0m                                  'ppo_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=217476)[0m                                  'ppo_micro_batch_size': None,
[36m(TaskRunner pid=217476)[0m                                  'ppo_micro_batch_size_per_gpu': 32,
[36m(TaskRunner pid=217476)[0m                                  'ppo_mini_batch_size': 64,
[36m(TaskRunner pid=217476)[0m                                  'shuffle': False,
[36m(TaskRunner pid=217476)[0m                                  'strategy': 'fsdp',
[36m(TaskRunner pid=217476)[0m                                  'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=217476)[0m                                  'use_dynamic_bsz': False,
[36m(TaskRunner pid=217476)[0m                                  'use_kl_loss': True,
[36m(TaskRunner pid=217476)[0m                                  'use_torch_compile': True},
[36m(TaskRunner pid=217476)[0m                        'hybrid_engine': True,
[36m(TaskRunner pid=217476)[0m                        'model': {'enable_gradient_checkpointing': True,
[36m(TaskRunner pid=217476)[0m                                  'external_lib': None,
[36m(TaskRunner pid=217476)[0m                                  'override_config': {},
[36m(TaskRunner pid=217476)[0m                                  'path': '/home/wangyc/verl/Qwen/Qwen2___5-7B-Instruct',
[36m(TaskRunner pid=217476)[0m                                  'use_liger': False,
[36m(TaskRunner pid=217476)[0m                                  'use_remove_padding': True},
[36m(TaskRunner pid=217476)[0m                        'ref': {'fsdp_config': {'param_offload': True,
[36m(TaskRunner pid=217476)[0m                                                'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=217476)[0m                                'log_prob_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=217476)[0m                                'log_prob_micro_batch_size': None,
[36m(TaskRunner pid=217476)[0m                                'log_prob_micro_batch_size_per_gpu': 64,
[36m(TaskRunner pid=217476)[0m                                'log_prob_use_dynamic_bsz': False,
[36m(TaskRunner pid=217476)[0m                                'strategy': 'fsdp',
[36m(TaskRunner pid=217476)[0m                                'ulysses_sequence_parallel_size': 1},
[36m(TaskRunner pid=217476)[0m                        'rollout': {'disable_log_stats': True,
[36m(TaskRunner pid=217476)[0m                                    'do_sample': True,
[36m(TaskRunner pid=217476)[0m                                    'dtype': 'bfloat16',
[36m(TaskRunner pid=217476)[0m                                    'enable_chunked_prefill': True,
[36m(TaskRunner pid=217476)[0m                                    'enforce_eager': True,
[36m(TaskRunner pid=217476)[0m                                    'engine_kwargs': {'swap_space': None},
[36m(TaskRunner pid=217476)[0m                                    'free_cache_engine': True,
[36m(TaskRunner pid=217476)[0m                                    'gpu_memory_utilization': 0.75,
[36m(TaskRunner pid=217476)[0m                                    'ignore_eos': False,
[36m(TaskRunner pid=217476)[0m                                    'load_format': 'dummy_dtensor',
[36m(TaskRunner pid=217476)[0m                                    'log_prob_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=217476)[0m                                    'log_prob_micro_batch_size': None,
[36m(TaskRunner pid=217476)[0m                                    'log_prob_micro_batch_size_per_gpu': 64,
[36m(TaskRunner pid=217476)[0m                                    'log_prob_use_dynamic_bsz': False,
[36m(TaskRunner pid=217476)[0m                                    'max_model_len': None,
[36m(TaskRunner pid=217476)[0m                                    'max_num_batched_tokens': 8192,
[36m(TaskRunner pid=217476)[0m                                    'max_num_seqs': 1024,
[36m(TaskRunner pid=217476)[0m                                    'n': 6,
[36m(TaskRunner pid=217476)[0m                                    'name': 'vllm',
[36m(TaskRunner pid=217476)[0m                                    'prompt_length': 1024,
[36m(TaskRunner pid=217476)[0m                                    'response_length': 1024,
[36m(TaskRunner pid=217476)[0m                                    'temperature': 1.0,
[36m(TaskRunner pid=217476)[0m                                    'tensor_model_parallel_size': 2,
[36m(TaskRunner pid=217476)[0m                                    'top_k': -1,
[36m(TaskRunner pid=217476)[0m                                    'top_p': 1,
[36m(TaskRunner pid=217476)[0m                                    'use_fire_sampling': False,
[36m(TaskRunner pid=217476)[0m                                    'val_kwargs': {'do_sample': False,
[36m(TaskRunner pid=217476)[0m                                                   'n': 1,
[36m(TaskRunner pid=217476)[0m                                                   'temperature': 0,
[36m(TaskRunner pid=217476)[0m                                                   'top_k': -1,
[36m(TaskRunner pid=217476)[0m                                                   'top_p': 1.0}}},
[36m(TaskRunner pid=217476)[0m  'algorithm': {'adv_estimator': 'grpo',
[36m(TaskRunner pid=217476)[0m                'gamma': 1.0,
[36m(TaskRunner pid=217476)[0m                'kl_ctrl': {'horizon': 10000,
[36m(TaskRunner pid=217476)[0m                            'kl_coef': 0.001,
[36m(TaskRunner pid=217476)[0m                            'target_kl': 0.1,
[36m(TaskRunner pid=217476)[0m                            'type': 'fixed'},
[36m(TaskRunner pid=217476)[0m DeprecationWarning: `ray.state.available_resources_per_node` is a private attribute and access will be removed in a future Ray version.
[36m(TaskRunner pid=217476)[0m WARNING:2025-04-24 05:15:04,637:Waiting for register center actor PgaNDf_register_center to be ready. Elapsed time: 0 seconds out of 300 seconds.
[36m(TaskRunner pid=217476)[0m                'kl_penalty': 'kl',
[36m(TaskRunner pid=217476)[0m                'lam': 1.0,
[36m(TaskRunner pid=217476)[0m                'norm_adv_by_std_in_grpo': True,
[36m(TaskRunner pid=217476)[0m                'use_kl_in_reward': False},
[36m(TaskRunner pid=217476)[0m  'critic': {'checkpoint': {'contents': ['model', 'optimizer', 'extra']},
[36m(TaskRunner pid=217476)[0m             'cliprange_value': 0.5,
[36m(TaskRunner pid=217476)[0m             'forward_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=217476)[0m             'forward_micro_batch_size': None,
[36m(TaskRunner pid=217476)[0m             'forward_micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=217476)[0m             'grad_clip': 1.0,
[36m(TaskRunner pid=217476)[0m             'model': {'enable_gradient_checkpointing': True,
[36m(TaskRunner pid=217476)[0m                       'external_lib': None,
[36m(TaskRunner pid=217476)[0m                       'fsdp_config': {'fsdp_size': -1,
[36m(TaskRunner pid=217476)[0m                                       'optimizer_offload': False,
[36m(TaskRunner pid=217476)[0m                                       'param_offload': False,
[36m(TaskRunner pid=217476)[0m                                       'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=217476)[0m                       'override_config': {},
[36m(TaskRunner pid=217476)[0m                       'path': '~/models/deepseek-llm-7b-chat',
[36m(TaskRunner pid=217476)[0m                       'tokenizer_path': '/home/wangyc/verl/Qwen/Qwen2___5-7B-Instruct',
[36m(TaskRunner pid=217476)[0m                       'use_remove_padding': False},
[36m(TaskRunner pid=217476)[0m             'optim': {'lr': 1e-05,
[36m(TaskRunner pid=217476)[0m                       'lr_warmup_steps_ratio': 0.0,
[36m(TaskRunner pid=217476)[0m                       'min_lr_ratio': None,
[36m(TaskRunner pid=217476)[0m                       'total_training_steps': -1,
[36m(TaskRunner pid=217476)[0m                       'warmup_style': 'constant',
[36m(TaskRunner pid=217476)[0m                       'weight_decay': 0.01},
[36m(TaskRunner pid=217476)[0m             'ppo_epochs': 1,
[36m(TaskRunner pid=217476)[0m             'ppo_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=217476)[0m             'ppo_micro_batch_size': None,
[36m(TaskRunner pid=217476)[0m             'ppo_micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=217476)[0m             'ppo_mini_batch_size': 64,
[36m(TaskRunner pid=217476)[0m             'rollout_n': 6,
[36m(TaskRunner pid=217476)[0m             'shuffle': False,
[36m(TaskRunner pid=217476)[0m             'strategy': 'fsdp',
[36m(TaskRunner pid=217476)[0m             'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=217476)[0m             'use_dynamic_bsz': False},
[36m(TaskRunner pid=217476)[0m  'custom_reward_function': {'name': 'compute_score', 'path': None},
[36m(TaskRunner pid=217476)[0m  'data': {'custom_cls': {'name': None, 'path': None},
[36m(TaskRunner pid=217476)[0m           'filter_overlong_prompts': False,
[36m(TaskRunner pid=217476)[0m           'filter_overlong_prompts_workers': 1,
[36m(TaskRunner pid=217476)[0m           'image_key': 'images',
[36m(TaskRunner pid=217476)[0m           'max_prompt_length': 1024,
[36m(TaskRunner pid=217476)[0m           'max_response_length': 1024,
[36m(TaskRunner pid=217476)[0m           'prompt_key': 'prompt',
[36m(TaskRunner pid=217476)[0m           'return_raw_chat': False,
[36m(TaskRunner pid=217476)[0m           'return_raw_input_ids': False,
[36m(TaskRunner pid=217476)[0m           'reward_fn_key': 'data_source',
[36m(TaskRunner pid=217476)[0m           'shuffle': True,
[36m(TaskRunner pid=217476)[0m           'tokenizer': None,
[36m(TaskRunner pid=217476)[0m           'train_batch_size': 128,
[36m(TaskRunner pid=217476)[0m           'train_files': '/home/wangyc/verl/data/jec-qa-1-multi-choice/train.parquet',
[36m(TaskRunner pid=217476)[0m           'truncation': 'error',
[36m(TaskRunner pid=217476)[0m           'val_batch_size': 1312,
[36m(TaskRunner pid=217476)[0m           'val_files': '/home/wangyc/verl/data/jec-qa-1-multi-choice/test.parquet',
[36m(TaskRunner pid=217476)[0m           'video_key': 'videos'},
[36m(TaskRunner pid=217476)[0m  'ray_init': {'num_cpus': None},
[36m(TaskRunner pid=217476)[0m  'reward_model': {'enable': False,
[36m(TaskRunner pid=217476)[0m                   'forward_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=217476)[0m                   'max_length': None,
[36m(TaskRunner pid=217476)[0m                   'micro_batch_size': None,
[36m(TaskRunner pid=217476)[0m                   'micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=217476)[0m                   'model': {'external_lib': None,
[36m(TaskRunner pid=217476)[0m                             'fsdp_config': {'fsdp_size': -1,
[36m(TaskRunner pid=217476)[0m                                             'param_offload': False,
[36m(TaskRunner pid=217476)[0m                                             'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=217476)[0m                             'input_tokenizer': '/home/wangyc/verl/Qwen/Qwen2___5-7B-Instruct',
[36m(TaskRunner pid=217476)[0m                             'path': '~/models/FsfairX-LLaMA3-RM-v0.1',
[36m(TaskRunner pid=217476)[0m                             'use_remove_padding': False},
[36m(TaskRunner pid=217476)[0m                   'reward_manager': 'naive',
[36m(TaskRunner pid=217476)[0m                   'strategy': 'fsdp',
[36m(TaskRunner pid=217476)[0m                   'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=217476)[0m                   'use_dynamic_bsz': False},
[36m(TaskRunner pid=217476)[0m  'trainer': {'balance_batch': True,
[36m(TaskRunner pid=217476)[0m              'critic_warmup': 0,
[36m(TaskRunner pid=217476)[0m              'default_hdfs_dir': None,
[36m(TaskRunner pid=217476)[0m              'default_local_dir': 'checkpoints/qwen2.5-7b-grpo-hard-mcq',
[36m(TaskRunner pid=217476)[0m              'del_local_ckpt_after_load': False,
[36m(TaskRunner pid=217476)[0m              'experiment_name': 'qwen2.5-7b-grpo-mcq',
[36m(TaskRunner pid=217476)[0m              'log_val_generations': 0,
[36m(TaskRunner pid=217476)[0m              'logger': ['console'],
[36m(TaskRunner pid=217476)[0m              'max_actor_ckpt_to_keep': None,
[36m(TaskRunner pid=217476)[0m              'max_critic_ckpt_to_keep': None,
[36m(TaskRunner pid=217476)[0m              'n_gpus_per_node': 8,
[36m(TaskRunner pid=217476)[0m              'nnodes': 1,
[36m(TaskRunner pid=217476)[0m              'project_name': 'Lawyer-Zero',
[36m(TaskRunner pid=217476)[0m              'ray_wait_register_center_timeout': 300,
[36m(TaskRunner pid=217476)[0m              'resume_from_path': None,
[36m(TaskRunner pid=217476)[0m              'resume_mode': 'auto',
[36m(TaskRunner pid=217476)[0m              'save_freq': 50,
[36m(TaskRunner pid=217476)[0m              'test_freq': 10,
[36m(TaskRunner pid=217476)[0m              'total_epochs': 2,
[36m(TaskRunner pid=217476)[0m              'total_training_steps': None,
[36m(TaskRunner pid=217476)[0m              'val_before_train': True}}
[36m(TaskRunner pid=217476)[0m WARNING: val_batch_size is deprecated. Validation datasets are sent to inference engines as a whole batch, which will schedule the memory themselves.
[36m(TaskRunner pid=217476)[0m [validate_config] All configuration checks passed successfully!
[36m(TaskRunner pid=217476)[0m dataset len: 8448
[36m(TaskRunner pid=217476)[0m dataset len: 2113
[36m(TaskRunner pid=217476)[0m Size of train dataloader: 66
[36m(TaskRunner pid=217476)[0m Total training steps: 132
[36m(WorkerDict pid=225257)[0m Model config after override: Qwen2Config {
[36m(WorkerDict pid=225257)[0m   "architectures": [
[36m(WorkerDict pid=225257)[0m     "Qwen2ForCausalLM"
[36m(WorkerDict pid=225257)[0m   ],
[36m(WorkerDict pid=225257)[0m You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.
[36m(WorkerDict pid=225257)[0m Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]
[36m(WorkerDict pid=225257)[0m Loading checkpoint shards:  25%|██▌       | 1/4 [00:00<00:01,  1.65it/s]
[36m(WorkerDict pid=225257)[0m Loading checkpoint shards: 100%|██████████| 4/4 [00:03<00:00,  1.34it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:03<00:00,  1.33it/s]
[36m(WorkerDict pid=225257)[0m [rank0]:[W424 05:15:24.505253713 ProcessGroupNCCL.cpp:4561] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[36m(WorkerDict pid=225257)[0m Flash Attention 2.0 only supports torch.float16 and torch.bfloat16 dtypes, but the current dype in Qwen2ForCausalLM is torch.float32. You should run training or inference using Automatic Mixed-Precision via the `with torch.autocast(device_type='torch_device'):` decorator, or load the model with the `torch_dtype` argument. Example: `model = AutoModel.from_pretrained("openai/whisper-tiny", attn_implementation="flash_attention_2", torch_dtype=torch.float16)`
[36m(WorkerDict pid=231211)[0m You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=225257)[0m Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s][32m [repeated 8x across cluster][0m
[36m(WorkerDict pid=231211)[0m Loading checkpoint shards:  75%|███████▌  | 3/4 [00:02<00:00,  1.19it/s][32m [repeated 23x across cluster][0m
[36m(WorkerDict pid=231211)[0m Loading checkpoint shards: 100%|██████████| 4/4 [00:03<00:00,  1.34it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:03<00:00,  1.32it/s][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=231208)[0m [rank3]:[W424 05:15:24.519029058 ProcessGroupNCCL.cpp:4561] [PG ID 0 PG GUID 0 Rank 3]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=231211)[0m Flash Attention 2.0 only supports torch.float16 and torch.bfloat16 dtypes, but the current dype in Qwen2ForCausalLM is torch.float32. You should run training or inference using Automatic Mixed-Precision via the `with torch.autocast(device_type='torch_device'):` decorator, or load the model with the `torch_dtype` argument. Example: `model = AutoModel.from_pretrained("openai/whisper-tiny", attn_implementation="flash_attention_2", torch_dtype=torch.float16)`[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=231211)[0m Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=225257)[0m Loading checkpoint shards:  50%|█████     | 2/4 [00:07<00:07,  3.58s/it][32m [repeated 9x across cluster][0m
[36m(WorkerDict pid=231208)[0m Loading checkpoint shards: 100%|██████████| 4/4 [00:14<00:00,  3.52s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:14<00:00,  3.56s/it]
[36m(WorkerDict pid=231212)[0m Loading checkpoint shards:  75%|███████▌  | 3/4 [00:11<00:03,  3.90s/it][32m [repeated 15x across cluster][0m
[36m(TaskRunner pid=217476)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_init_model()[39m (pid=231211, ip=222.29.51.203, actor_id=fe91962af8d8aa115b4549a701000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f0e68c289a0>)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=217476)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=217476)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 469, in init_model
[36m(TaskRunner pid=217476)[0m     self.rollout, self.rollout_sharding_manager = self._build_rollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 363, in _build_rollout
[36m(TaskRunner pid=217476)[0m     rollout = vLLMRollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/rollout/vllm_rollout/vllm_rollout_spmd.py", line 132, in __init__
[36m(TaskRunner pid=217476)[0m     self.inference_engine = LLM(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/utils.py", line 1096, in inner
[36m(TaskRunner pid=217476)[0m     return fn(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/entrypoints/llm.py", line 243, in __init__
[36m(TaskRunner pid=217476)[0m     self.llm_engine = LLMEngine.from_engine_args(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/engine/llm_engine.py", line 521, in from_engine_args
[36m(TaskRunner pid=217476)[0m     return engine_cls.from_vllm_config(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 115, in from_vllm_config
[36m(TaskRunner pid=217476)[0m     return cls(vllm_config=vllm_config,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 90, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCoreClient.make_client(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 74, in make_client
[36m(TaskRunner pid=217476)[0m     return InprocClient(vllm_config, executor_class, log_stats)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 197, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCore(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 71, in __init__
[36m(TaskRunner pid=217476)[0m     self._initialize_kv_caches(vllm_config)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 136, in _initialize_kv_caches
[36m(TaskRunner pid=217476)[0m     kv_cache_configs = [
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 137, in <listcomp>
[36m(TaskRunner pid=217476)[0m     get_kv_cache_config(vllm_config, kv_cache_spec_one_worker,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 643, in get_kv_cache_config
[36m(TaskRunner pid=217476)[0m     check_enough_kv_cache_memory(vllm_config, kv_cache_spec, available_memory)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 480, in check_enough_kv_cache_memory
[36m(TaskRunner pid=217476)[0m     raise ValueError("No available memory for the cache blocks. "
[36m(TaskRunner pid=217476)[0m ValueError: No available memory for the cache blocks. Try increasing `gpu_memory_utilization` when initializing the engine.
[36m(WorkerDict pid=231212)[0m Loading checkpoint shards: 100%|██████████| 4/4 [00:15<00:00,  3.75s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:15<00:00,  3.82s/it][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=225257)[0m   "attention_dropout": 0.0,
[36m(WorkerDict pid=225257)[0m   "eos_token_id": 151645,
[36m(WorkerDict pid=225257)[0m   "hidden_act": "silu",
[36m(WorkerDict pid=225257)[0m   "hidden_size": 3584,
[36m(WorkerDict pid=225257)[0m   "initializer_range": 0.02,
[36m(WorkerDict pid=225257)[0m   "intermediate_size": 18944,
[36m(WorkerDict pid=225257)[0m   "max_position_embeddings": 32768,
[36m(WorkerDict pid=225257)[0m   "max_window_layers": 28,
[36m(WorkerDict pid=225257)[0m   "model_type": "qwen2",
[36m(WorkerDict pid=225257)[0m   "num_attention_heads": 28,
[36m(WorkerDict pid=225257)[0m   "num_hidden_layers": 28,
[36m(WorkerDict pid=225257)[0m   "num_key_value_heads": 4,
[36m(WorkerDict pid=225257)[0m   "pad_token_id": 151643,
[36m(WorkerDict pid=225257)[0m   "rms_norm_eps": 1e-06,
[36m(WorkerDict pid=225257)[0m   "rope_scaling": null,
[36m(WorkerDict pid=225257)[0m   "rope_theta": 1000000.0,
[36m(WorkerDict pid=225257)[0m   "sliding_window": 131072,
[36m(WorkerDict pid=225257)[0m   "tie_word_embeddings": false,
[36m(WorkerDict pid=225257)[0m   "torch_dtype": "bfloat16",
[36m(WorkerDict pid=225257)[0m   "transformers_version": "4.51.3",
[36m(WorkerDict pid=225257)[0m   "use_cache": true,
[36m(WorkerDict pid=225257)[0m   "use_sliding_window": false,
[36m(WorkerDict pid=225257)[0m   "vocab_size": 152064
[36m(WorkerDict pid=225257)[0m }
[36m(WorkerDict pid=225257)[0m 
[36m(WorkerDict pid=225257)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention
[36m(WorkerDict pid=225257)[0m NCCL version 2.21.5+cuda12.4
[36m(WorkerDict pid=225257)[0m Qwen2ForCausalLM contains 7.62B parameters
[36m(WorkerDict pid=225257)[0m wrap_policy: functools.partial(<function _or_policy at 0x7f1f28790280>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x7f1f28790160>, transformer_layer_cls={<class 'transformers.models.qwen2.modeling_qwen2.Qwen2DecoderLayer'>})])
[36m(WorkerDict pid=225257)[0m Actor use_remove_padding=True
[36m(WorkerDict pid=231206)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention[32m [repeated 7x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)[0m
[36m(WorkerDict pid=231206)[0m wrap_policy: functools.partial(<function _or_policy at 0x7eee13b60280>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x7eee13b60160>, transformer_layer_cls={<class 'transformers.models.qwen2.modeling_qwen2.Qwen2DecoderLayer'>})])[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=225257)[0m Model config after override: Qwen2Config {
[36m(WorkerDict pid=225257)[0m   "architectures": [
[36m(WorkerDict pid=225257)[0m     "Qwen2ForCausalLM"
[36m(WorkerDict pid=225257)[0m   ],
[36m(WorkerDict pid=225257)[0m   "attention_dropout": 0.0,
[36m(WorkerDict pid=225257)[0m   "eos_token_id": 151645,
[36m(WorkerDict pid=225257)[0m   "hidden_act": "silu",
[36m(WorkerDict pid=225257)[0m   "hidden_size": 3584,
[36m(WorkerDict pid=225257)[0m   "initializer_range": 0.02,
[36m(WorkerDict pid=225257)[0m   "intermediate_size": 18944,
[36m(WorkerDict pid=225257)[0m   "max_position_embeddings": 32768,
[36m(WorkerDict pid=225257)[0m   "max_window_layers": 28,
[36m(WorkerDict pid=225257)[0m   "model_type": "qwen2",
[36m(WorkerDict pid=225257)[0m   "num_attention_heads": 28,
[36m(WorkerDict pid=225257)[0m   "num_hidden_layers": 28,
[36m(WorkerDict pid=225257)[0m   "num_key_value_heads": 4,
[36m(WorkerDict pid=225257)[0m   "pad_token_id": 151643,
[36m(WorkerDict pid=225257)[0m   "rms_norm_eps": 1e-06,
[36m(WorkerDict pid=225257)[0m   "rope_scaling": null,
[36m(WorkerDict pid=225257)[0m   "rope_theta": 1000000.0,
[36m(WorkerDict pid=225257)[0m   "sliding_window": 131072,
[36m(WorkerDict pid=225257)[0m   "tie_word_embeddings": false,
[36m(WorkerDict pid=225257)[0m   "torch_dtype": "bfloat16",
[36m(WorkerDict pid=225257)[0m   "transformers_version": "4.51.3",
[36m(WorkerDict pid=225257)[0m   "use_cache": true,
[36m(WorkerDict pid=225257)[0m   "use_sliding_window": false,
[36m(WorkerDict pid=225257)[0m   "vocab_size": 152064
[36m(WorkerDict pid=225257)[0m }
[36m(WorkerDict pid=225257)[0m 
[36m(WorkerDict pid=231206)[0m Actor use_remove_padding=True[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=231208)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention
[36m(WorkerDict pid=225257)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention
[36m(WorkerDict pid=225257)[0m Qwen2ForCausalLM contains 7.62B parameters
[36m(WorkerDict pid=225257)[0m wrap_policy: functools.partial(<function _or_policy at 0x7f1f28790280>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x7f1f28790160>, transformer_layer_cls={<class 'transformers.models.qwen2.modeling_qwen2.Qwen2DecoderLayer'>})])
[36m(WorkerDict pid=231209)[0m Total steps: 132, num_warmup_steps: 0
[36m(WorkerDict pid=231209)[0m Actor use_remove_padding=True
[36m(WorkerDict pid=231212)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention[32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=231206)[0m wrap_policy: functools.partial(<function _or_policy at 0x7eee13b60280>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x7eee13b60160>, transformer_layer_cls={<class 'transformers.models.qwen2.modeling_qwen2.Qwen2DecoderLayer'>})])[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=231211)[0m Actor use_remove_padding=True
[36m(WorkerDict pid=225257)[0m Before building vllm rollout, memory allocated (GB): 3.5471720695495605, memory reserved (GB): 19.66015625
[36m(WorkerDict pid=231206)[0m WARNING 04-24 05:17:11 [cuda.py:96] To see benefits of async output processing, enable CUDA graph. Since, enforce-eager is enabled, async output processor cannot be used
[36m(WorkerDict pid=225257)[0m Total steps: 132, num_warmup_steps: 0[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=225257)[0m Actor use_remove_padding=True[32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=225257)[0m WARNING 04-24 05:17:15 [utils.py:2413] Methods determine_num_available_blocks,device_config,get_cache_block_size_bytes,initialize_cache not implemented in <vllm.v1.worker.gpu_worker.Worker object at 0x7f1cb2dd4a90>
[36m(WorkerDict pid=231209)[0m NCCL version 2.21.5+cuda12.4
Error executing job with overrides: ['algorithm.adv_estimator=grpo', 'data.train_files=/home/wangyc/verl/data/jec-qa-1-multi-choice/train.parquet', 'data.val_files=/home/wangyc/verl/data/jec-qa-1-multi-choice/test.parquet', 'data.train_batch_size=128', 'data.val_batch_size=1312', 'data.max_prompt_length=1024', 'data.max_response_length=1024', 'actor_rollout_ref.model.path=/home/wangyc/verl/Qwen/Qwen2___5-7B-Instruct', 'actor_rollout_ref.actor.optim.lr=1e-6', 'actor_rollout_ref.model.use_remove_padding=True', 'actor_rollout_ref.actor.ppo_mini_batch_size=64', 'actor_rollout_ref.actor.ppo_micro_batch_size_per_gpu=32', 'actor_rollout_ref.actor.use_kl_loss=True', 'actor_rollout_ref.actor.kl_loss_coef=0.001', 'actor_rollout_ref.actor.kl_loss_type=low_var_kl', 'actor_rollout_ref.model.enable_gradient_checkpointing=True', 'actor_rollout_ref.actor.fsdp_config.param_offload=False', 'actor_rollout_ref.actor.fsdp_config.optimizer_offload=False', 'actor_rollout_ref.rollout.log_prob_micro_batch_size_per_gpu=64', 'actor_rollout_ref.rollout.tensor_model_parallel_size=2', 'actor_rollout_ref.rollout.name=vllm', 'actor_rollout_ref.rollout.gpu_memory_utilization=0.75', 'actor_rollout_ref.rollout.n=6', 'actor_rollout_ref.ref.log_prob_micro_batch_size_per_gpu=64', 'actor_rollout_ref.ref.fsdp_config.param_offload=True', 'algorithm.kl_ctrl.kl_coef=0.001', 'trainer.critic_warmup=0', "trainer.logger=['console']", 'trainer.project_name=Lawyer-Zero', 'trainer.experiment_name=qwen2.5-7b-grpo-mcq', 'trainer.n_gpus_per_node=8', 'trainer.nnodes=1', 'trainer.default_local_dir=checkpoints/qwen2.5-7b-grpo-hard-mcq', 'trainer.save_freq=50', 'trainer.test_freq=10', 'trainer.total_epochs=2']
Traceback (most recent call last):
  File "/home/wangyc/verl/verl/trainer/main_ppo.py", line 63, in main
    run_ppo(config)
  File "/home/wangyc/verl/verl/trainer/main_ppo.py", line 80, in run_ppo
    ray.get(runner.run.remote(config))
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/ray/_private/worker.py", line 2771, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/ray/_private/worker.py", line 919, in get_objects
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError(ValueError): [36mray::TaskRunner.run()[39m (pid=217476, ip=222.29.51.203, actor_id=28f2e8224043975851da2ef701000000, repr=<main_ppo.TaskRunner object at 0x7f060d7ab280>)
  File "/home/wangyc/verl/verl/trainer/main_ppo.py", line 207, in run
    trainer.init_workers()
  File "/home/wangyc/verl/verl/trainer/ppo/ray_trainer.py", line 734, in init_workers
    self.actor_rollout_wg.init_model()
  File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 43, in func
    output = ray.get(output)
ray.exceptions.RayTaskError(ValueError): [36mray::WorkerDict.actor_rollout_init_model()[39m (pid=231206, ip=222.29.51.203, actor_id=a53a5091dc028f52f984327001000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7eedb29d4940>)
  File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
    return getattr(self.worker_dict[key], name)(*args, **kwargs)
  File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
    return func(*args, **kwargs)
  File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 469, in init_model
    self.rollout, self.rollout_sharding_manager = self._build_rollout(
  File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 363, in _build_rollout
    rollout = vLLMRollout(
  File "/home/wangyc/verl/verl/workers/rollout/vllm_rollout/vllm_rollout_spmd.py", line 132, in __init__
    self.inference_engine = LLM(
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/utils.py", line 1096, in inner
    return fn(*args, **kwargs)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/entrypoints/llm.py", line 243, in __init__
    self.llm_engine = LLMEngine.from_engine_args(
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/engine/llm_engine.py", line 521, in from_engine_args
    return engine_cls.from_vllm_config(
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 115, in from_vllm_config
    return cls(vllm_config=vllm_config,
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 90, in __init__
    self.engine_core = EngineCoreClient.make_client(
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 74, in make_client
    return InprocClient(vllm_config, executor_class, log_stats)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 197, in __init__
    self.engine_core = EngineCore(*args, **kwargs)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 71, in __init__
    self._initialize_kv_caches(vllm_config)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 136, in _initialize_kv_caches
    kv_cache_configs = [
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 137, in <listcomp>
    get_kv_cache_config(vllm_config, kv_cache_spec_one_worker,
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 643, in get_kv_cache_config
    check_enough_kv_cache_memory(vllm_config, kv_cache_spec, available_memory)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 480, in check_enough_kv_cache_memory
    raise ValueError("No available memory for the cache blocks. "
ValueError: No available memory for the cache blocks. Try increasing `gpu_memory_utilization` when initializing the engine.

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
[36m(TaskRunner pid=217476)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_init_model()[39m (pid=231210, ip=222.29.51.203, actor_id=4056d620d3c53b3d0d0654b801000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f79d836c9d0>)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=217476)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=217476)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 469, in init_model
[36m(TaskRunner pid=217476)[0m     self.rollout, self.rollout_sharding_manager = self._build_rollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 363, in _build_rollout
[36m(TaskRunner pid=217476)[0m     rollout = vLLMRollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/rollout/vllm_rollout/vllm_rollout_spmd.py", line 132, in __init__
[36m(TaskRunner pid=217476)[0m     self.inference_engine = LLM(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/utils.py", line 1096, in inner
[36m(TaskRunner pid=217476)[0m     return fn(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/entrypoints/llm.py", line 243, in __init__
[36m(TaskRunner pid=217476)[0m     self.llm_engine = LLMEngine.from_engine_args(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/engine/llm_engine.py", line 521, in from_engine_args
[36m(TaskRunner pid=217476)[0m     return engine_cls.from_vllm_config(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 115, in from_vllm_config
[36m(TaskRunner pid=217476)[0m     return cls(vllm_config=vllm_config,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 90, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCoreClient.make_client(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 74, in make_client
[36m(TaskRunner pid=217476)[0m     return InprocClient(vllm_config, executor_class, log_stats)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 197, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCore(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 71, in __init__
[36m(TaskRunner pid=217476)[0m     self._initialize_kv_caches(vllm_config)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 136, in _initialize_kv_caches
[36m(TaskRunner pid=217476)[0m     kv_cache_configs = [
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 137, in <listcomp>
[36m(TaskRunner pid=217476)[0m     get_kv_cache_config(vllm_config, kv_cache_spec_one_worker,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 643, in get_kv_cache_config
[36m(TaskRunner pid=217476)[0m     check_enough_kv_cache_memory(vllm_config, kv_cache_spec, available_memory)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 480, in check_enough_kv_cache_memory
[36m(TaskRunner pid=217476)[0m     raise ValueError("No available memory for the cache blocks. "
[36m(TaskRunner pid=217476)[0m ValueError: No available memory for the cache blocks. Try increasing `gpu_memory_utilization` when initializing the engine.
[36m(TaskRunner pid=217476)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_init_model()[39m (pid=231208, ip=222.29.51.203, actor_id=87a95d8e00119be6a53d3e1d01000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f6f44e109a0>)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=217476)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=217476)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 469, in init_model
[36m(TaskRunner pid=217476)[0m     self.rollout, self.rollout_sharding_manager = self._build_rollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 363, in _build_rollout
[36m(TaskRunner pid=217476)[0m     rollout = vLLMRollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/rollout/vllm_rollout/vllm_rollout_spmd.py", line 132, in __init__
[36m(TaskRunner pid=217476)[0m     self.inference_engine = LLM(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/utils.py", line 1096, in inner
[36m(TaskRunner pid=217476)[0m     return fn(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/entrypoints/llm.py", line 243, in __init__
[36m(TaskRunner pid=217476)[0m     self.llm_engine = LLMEngine.from_engine_args(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/engine/llm_engine.py", line 521, in from_engine_args
[36m(TaskRunner pid=217476)[0m     return engine_cls.from_vllm_config(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 115, in from_vllm_config
[36m(TaskRunner pid=217476)[0m     return cls(vllm_config=vllm_config,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 90, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCoreClient.make_client(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 74, in make_client
[36m(TaskRunner pid=217476)[0m     return InprocClient(vllm_config, executor_class, log_stats)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 197, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCore(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 71, in __init__
[36m(TaskRunner pid=217476)[0m     self._initialize_kv_caches(vllm_config)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 136, in _initialize_kv_caches
[36m(TaskRunner pid=217476)[0m     kv_cache_configs = [
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 137, in <listcomp>
[36m(TaskRunner pid=217476)[0m     get_kv_cache_config(vllm_config, kv_cache_spec_one_worker,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 643, in get_kv_cache_config
[36m(TaskRunner pid=217476)[0m     check_enough_kv_cache_memory(vllm_config, kv_cache_spec, available_memory)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 480, in check_enough_kv_cache_memory
[36m(TaskRunner pid=217476)[0m     raise ValueError("No available memory for the cache blocks. "
[36m(TaskRunner pid=217476)[0m ValueError: No available memory for the cache blocks. Try increasing `gpu_memory_utilization` when initializing the engine.
[36m(TaskRunner pid=217476)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_init_model()[39m (pid=231207, ip=222.29.51.203, actor_id=5ca9105e3740315cd612fde601000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7fc77625c910>)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=217476)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=217476)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 469, in init_model
[36m(TaskRunner pid=217476)[0m     self.rollout, self.rollout_sharding_manager = self._build_rollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 363, in _build_rollout
[36m(TaskRunner pid=217476)[0m     rollout = vLLMRollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/rollout/vllm_rollout/vllm_rollout_spmd.py", line 132, in __init__
[36m(TaskRunner pid=217476)[0m     self.inference_engine = LLM(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/utils.py", line 1096, in inner
[36m(TaskRunner pid=217476)[0m     return fn(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/entrypoints/llm.py", line 243, in __init__
[36m(TaskRunner pid=217476)[0m     self.llm_engine = LLMEngine.from_engine_args(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/engine/llm_engine.py", line 521, in from_engine_args
[36m(TaskRunner pid=217476)[0m     return engine_cls.from_vllm_config(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 115, in from_vllm_config
[36m(TaskRunner pid=217476)[0m     return cls(vllm_config=vllm_config,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 90, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCoreClient.make_client(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 74, in make_client
[36m(TaskRunner pid=217476)[0m     return InprocClient(vllm_config, executor_class, log_stats)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 197, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCore(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 71, in __init__
[36m(TaskRunner pid=217476)[0m     self._initialize_kv_caches(vllm_config)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 136, in _initialize_kv_caches
[36m(TaskRunner pid=217476)[0m     kv_cache_configs = [
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 137, in <listcomp>
[36m(TaskRunner pid=217476)[0m     get_kv_cache_config(vllm_config, kv_cache_spec_one_worker,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 643, in get_kv_cache_config
[36m(TaskRunner pid=217476)[0m     check_enough_kv_cache_memory(vllm_config, kv_cache_spec, available_memory)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 480, in check_enough_kv_cache_memory
[36m(TaskRunner pid=217476)[0m     raise ValueError("No available memory for the cache blocks. "
[36m(TaskRunner pid=217476)[0m ValueError: No available memory for the cache blocks. Try increasing `gpu_memory_utilization` when initializing the engine.
[36m(TaskRunner pid=217476)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_init_model()[39m (pid=231212, ip=222.29.51.203, actor_id=adcec44b37e577435933b43901000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f0294168880>)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=217476)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=217476)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 469, in init_model
[36m(TaskRunner pid=217476)[0m     self.rollout, self.rollout_sharding_manager = self._build_rollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 363, in _build_rollout
[36m(TaskRunner pid=217476)[0m     rollout = vLLMRollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/rollout/vllm_rollout/vllm_rollout_spmd.py", line 132, in __init__
[36m(TaskRunner pid=217476)[0m     self.inference_engine = LLM(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/utils.py", line 1096, in inner
[36m(TaskRunner pid=217476)[0m     return fn(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/entrypoints/llm.py", line 243, in __init__
[36m(TaskRunner pid=217476)[0m     self.llm_engine = LLMEngine.from_engine_args(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/engine/llm_engine.py", line 521, in from_engine_args
[36m(TaskRunner pid=217476)[0m     return engine_cls.from_vllm_config(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 115, in from_vllm_config
[36m(TaskRunner pid=217476)[0m     return cls(vllm_config=vllm_config,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 90, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCoreClient.make_client(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 74, in make_client
[36m(TaskRunner pid=217476)[0m     return InprocClient(vllm_config, executor_class, log_stats)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 197, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCore(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 71, in __init__
[36m(TaskRunner pid=217476)[0m     self._initialize_kv_caches(vllm_config)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 136, in _initialize_kv_caches
[36m(TaskRunner pid=217476)[0m     kv_cache_configs = [
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 137, in <listcomp>
[36m(TaskRunner pid=217476)[0m     get_kv_cache_config(vllm_config, kv_cache_spec_one_worker,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 643, in get_kv_cache_config
[36m(TaskRunner pid=217476)[0m     check_enough_kv_cache_memory(vllm_config, kv_cache_spec, available_memory)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 480, in check_enough_kv_cache_memory
[36m(TaskRunner pid=217476)[0m     raise ValueError("No available memory for the cache blocks. "
[36m(TaskRunner pid=217476)[0m ValueError: No available memory for the cache blocks. Try increasing `gpu_memory_utilization` when initializing the engine.
[36m(TaskRunner pid=217476)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_init_model()[39m (pid=231209, ip=222.29.51.203, actor_id=ab14bee1c386ae68b7a3f89301000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f066acc48e0>)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=217476)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=217476)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 469, in init_model
[36m(TaskRunner pid=217476)[0m     self.rollout, self.rollout_sharding_manager = self._build_rollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 363, in _build_rollout
[36m(TaskRunner pid=217476)[0m     rollout = vLLMRollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/rollout/vllm_rollout/vllm_rollout_spmd.py", line 132, in __init__
[36m(TaskRunner pid=217476)[0m     self.inference_engine = LLM(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/utils.py", line 1096, in inner
[36m(TaskRunner pid=217476)[0m     return fn(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/entrypoints/llm.py", line 243, in __init__
[36m(TaskRunner pid=217476)[0m     self.llm_engine = LLMEngine.from_engine_args(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/engine/llm_engine.py", line 521, in from_engine_args
[36m(TaskRunner pid=217476)[0m     return engine_cls.from_vllm_config(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 115, in from_vllm_config
[36m(TaskRunner pid=217476)[0m     return cls(vllm_config=vllm_config,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 90, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCoreClient.make_client(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 74, in make_client
[36m(TaskRunner pid=217476)[0m     return InprocClient(vllm_config, executor_class, log_stats)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 197, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCore(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 71, in __init__
[36m(TaskRunner pid=217476)[0m     self._initialize_kv_caches(vllm_config)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 136, in _initialize_kv_caches
[36m(TaskRunner pid=217476)[0m     kv_cache_configs = [
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 137, in <listcomp>
[36m(TaskRunner pid=217476)[0m     get_kv_cache_config(vllm_config, kv_cache_spec_one_worker,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 643, in get_kv_cache_config
[36m(TaskRunner pid=217476)[0m     check_enough_kv_cache_memory(vllm_config, kv_cache_spec, available_memory)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 480, in check_enough_kv_cache_memory
[36m(TaskRunner pid=217476)[0m     raise ValueError("No available memory for the cache blocks. "
[36m(TaskRunner pid=217476)[0m ValueError: No available memory for the cache blocks. Try increasing `gpu_memory_utilization` when initializing the engine.
[36m(TaskRunner pid=217476)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_init_model()[39m (pid=225257, ip=222.29.51.203, actor_id=02cd9462928372750ca4712b01000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f1e3b60c880>)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=217476)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=217476)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 469, in init_model
[36m(TaskRunner pid=217476)[0m     self.rollout, self.rollout_sharding_manager = self._build_rollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 363, in _build_rollout
[36m(TaskRunner pid=217476)[0m     rollout = vLLMRollout(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/verl/verl/workers/rollout/vllm_rollout/vllm_rollout_spmd.py", line 132, in __init__
[36m(TaskRunner pid=217476)[0m     self.inference_engine = LLM(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/utils.py", line 1096, in inner
[36m(TaskRunner pid=217476)[0m     return fn(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/entrypoints/llm.py", line 243, in __init__
[36m(TaskRunner pid=217476)[0m     self.llm_engine = LLMEngine.from_engine_args(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/engine/llm_engine.py", line 521, in from_engine_args
[36m(TaskRunner pid=217476)[0m     return engine_cls.from_vllm_config(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 115, in from_vllm_config
[36m(TaskRunner pid=217476)[0m     return cls(vllm_config=vllm_config,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/llm_engine.py", line 90, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCoreClient.make_client(
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 74, in make_client
[36m(TaskRunner pid=217476)[0m     return InprocClient(vllm_config, executor_class, log_stats)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 197, in __init__
[36m(TaskRunner pid=217476)[0m     self.engine_core = EngineCore(*args, **kwargs)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 71, in __init__
[36m(TaskRunner pid=217476)[0m     self._initialize_kv_caches(vllm_config)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 136, in _initialize_kv_caches
[36m(TaskRunner pid=217476)[0m     kv_cache_configs = [
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 137, in <listcomp>
[36m(TaskRunner pid=217476)[0m     get_kv_cache_config(vllm_config, kv_cache_spec_one_worker,
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 643, in get_kv_cache_config
[36m(TaskRunner pid=217476)[0m     check_enough_kv_cache_memory(vllm_config, kv_cache_spec, available_memory)
[36m(TaskRunner pid=217476)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py", line 480, in check_enough_kv_cache_memory
[36m(TaskRunner pid=217476)[0m     raise ValueError("No available memory for the cache blocks. "
[36m(TaskRunner pid=217476)[0m ValueError: No available memory for the cache blocks. Try increasing `gpu_memory_utilization` when initializing the engine.
[36m(WorkerDict pid=231208)[0m WARNING 04-24 05:17:11 [cuda.py:96] To see benefits of async output processing, enable CUDA graph. Since, enforce-eager is enabled, async output processor cannot be used[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=231206)[0m WARNING 04-24 05:17:15 [utils.py:2413] Methods determine_num_available_blocks,device_config,get_cache_block_size_bytes,initialize_cache not implemented in <vllm.v1.worker.gpu_worker.Worker object at 0x7eecbca38070>[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=231207)[0m NCCL version 2.21.5+cuda12.4[32m [repeated 2x across cluster][0m
