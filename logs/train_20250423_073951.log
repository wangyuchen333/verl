2025-04-23 07:39:58,653	INFO worker.py:1832 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8266 [39m[22m
[36m(TaskRunner pid=862757)[0m {'actor_rollout_ref': {'actor': {'checkpoint': {'contents': ['model',
[36m(TaskRunner pid=862757)[0m                                                              'optimizer',
[36m(TaskRunner pid=862757)[0m                                                              'extra']},
[36m(TaskRunner pid=862757)[0m                                  'clip_ratio': 0.2,
[36m(TaskRunner pid=862757)[0m                                  'clip_ratio_c': 3.0,
[36m(TaskRunner pid=862757)[0m                                  'clip_ratio_high': 0.2,
[36m(TaskRunner pid=862757)[0m                                  'clip_ratio_low': 0.2,
[36m(TaskRunner pid=862757)[0m                                  'entropy_coeff': 0,
[36m(TaskRunner pid=862757)[0m                                  'fsdp_config': {'fsdp_size': -1,
[36m(TaskRunner pid=862757)[0m                                                  'optimizer_offload': False,
[36m(TaskRunner pid=862757)[0m                                                  'param_offload': False,
[36m(TaskRunner pid=862757)[0m                                                  'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=862757)[0m                                  'grad_clip': 1.0,
[36m(TaskRunner pid=862757)[0m                                  'kl_loss_coef': 0.001,
[36m(TaskRunner pid=862757)[0m                                  'kl_loss_type': 'low_var_kl',
[36m(TaskRunner pid=862757)[0m                                  'loss_agg_mode': 'token-mean',
[36m(TaskRunner pid=862757)[0m                                  'optim': {'lr': 1e-06,
[36m(TaskRunner pid=862757)[0m                                            'lr_warmup_steps': -1,
[36m(TaskRunner pid=862757)[0m                                            'lr_warmup_steps_ratio': 0.0,
[36m(TaskRunner pid=862757)[0m                                            'min_lr_ratio': None,
[36m(TaskRunner pid=862757)[0m                                            'total_training_steps': -1,
[36m(TaskRunner pid=862757)[0m                                            'warmup_style': 'constant',
[36m(TaskRunner pid=862757)[0m                                            'weight_decay': 0.01},
[36m(TaskRunner pid=862757)[0m                                  'ppo_epochs': 1,
[36m(TaskRunner pid=862757)[0m                                  'ppo_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=862757)[0m                                  'ppo_micro_batch_size': None,
[36m(TaskRunner pid=862757)[0m                                  'ppo_micro_batch_size_per_gpu': 32,
[36m(TaskRunner pid=862757)[0m                                  'ppo_mini_batch_size': 64,
[36m(TaskRunner pid=862757)[0m                                  'shuffle': False,
[36m(TaskRunner pid=862757)[0m                                  'strategy': 'fsdp',
[36m(TaskRunner pid=862757)[0m                                  'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=862757)[0m                                  'use_dynamic_bsz': False,
[36m(TaskRunner pid=862757)[0m                                  'use_kl_loss': True,
[36m(TaskRunner pid=862757)[0m                                  'use_torch_compile': True},
[36m(TaskRunner pid=862757)[0m                        'hybrid_engine': True,
[36m(TaskRunner pid=862757)[0m                        'model': {'enable_gradient_checkpointing': True,
[36m(TaskRunner pid=862757)[0m                                  'external_lib': None,
[36m(TaskRunner pid=862757)[0m                                  'override_config': {},
[36m(TaskRunner pid=862757)[0m                                  'path': '/home/wangyc/verl/Qwen/Qwen2___5-7B-Instruct',
[36m(TaskRunner pid=862757)[0m                                  'use_liger': False,
[36m(TaskRunner pid=862757)[0m                                  'use_remove_padding': True},
[36m(TaskRunner pid=862757)[0m                        'ref': {'fsdp_config': {'param_offload': True,
[36m(TaskRunner pid=862757)[0m                                                'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=862757)[0m                                'log_prob_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=862757)[0m                                'log_prob_micro_batch_size': None,
[36m(TaskRunner pid=862757)[0m                                'log_prob_micro_batch_size_per_gpu': 64,
[36m(TaskRunner pid=862757)[0m                                'log_prob_use_dynamic_bsz': False,
[36m(TaskRunner pid=862757)[0m                                'strategy': 'fsdp',
[36m(TaskRunner pid=862757)[0m                                'ulysses_sequence_parallel_size': 1},
[36m(TaskRunner pid=862757)[0m                        'rollout': {'disable_log_stats': True,
[36m(TaskRunner pid=862757)[0m                                    'do_sample': True,
[36m(TaskRunner pid=862757)[0m                                    'dtype': 'bfloat16',
[36m(TaskRunner pid=862757)[0m                                    'enable_chunked_prefill': True,
[36m(TaskRunner pid=862757)[0m                                    'enforce_eager': True,
[36m(TaskRunner pid=862757)[0m                                    'engine_kwargs': {'swap_space': None},
[36m(TaskRunner pid=862757)[0m                                    'free_cache_engine': True,
[36m(TaskRunner pid=862757)[0m                                    'gpu_memory_utilization': 0.75,
[36m(TaskRunner pid=862757)[0m                                    'ignore_eos': False,
[36m(TaskRunner pid=862757)[0m                                    'load_format': 'dummy_dtensor',
[36m(TaskRunner pid=862757)[0m                                    'log_prob_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=862757)[0m                                    'log_prob_micro_batch_size': None,
[36m(TaskRunner pid=862757)[0m                                    'log_prob_micro_batch_size_per_gpu': 64,
[36m(TaskRunner pid=862757)[0m                                    'log_prob_use_dynamic_bsz': False,
[36m(TaskRunner pid=862757)[0m                                    'max_model_len': None,
[36m(TaskRunner pid=862757)[0m                                    'max_num_batched_tokens': 8192,
[36m(TaskRunner pid=862757)[0m                                    'max_num_seqs': 1024,
[36m(TaskRunner pid=862757)[0m                                    'n': 6,
[36m(TaskRunner pid=862757)[0m                                    'name': 'vllm',
[36m(TaskRunner pid=862757)[0m                                    'prompt_length': 1024,
[36m(TaskRunner pid=862757)[0m                                    'response_length': 1024,
[36m(TaskRunner pid=862757)[0m                                    'temperature': 1.0,
[36m(TaskRunner pid=862757)[0m                                    'tensor_model_parallel_size': 2,
[36m(TaskRunner pid=862757)[0m                                    'top_k': -1,
[36m(TaskRunner pid=862757)[0m                                    'top_p': 1,
[36m(TaskRunner pid=862757)[0m                                    'use_fire_sampling': False,
[36m(TaskRunner pid=862757)[0m                                    'val_kwargs': {'do_sample': False,
[36m(TaskRunner pid=862757)[0m                                                   'n': 1,
[36m(TaskRunner pid=862757)[0m                                                   'temperature': 0,
[36m(TaskRunner pid=862757)[0m                                                   'top_k': -1,
[36m(TaskRunner pid=862757)[0m                                                   'top_p': 1.0}}},
[36m(TaskRunner pid=862757)[0m  'algorithm': {'adv_estimator': 'grpo',
[36m(TaskRunner pid=862757)[0m                'gamma': 1.0,
[36m(TaskRunner pid=862757)[0m                'kl_ctrl': {'horizon': 10000,
[36m(TaskRunner pid=862757)[0m                            'kl_coef': 0.001,
[36m(TaskRunner pid=862757)[0m                            'target_kl': 0.1,
[36m(TaskRunner pid=862757)[0m                            'type': 'fixed'},
[36m(TaskRunner pid=862757)[0m DeprecationWarning: `ray.state.available_resources_per_node` is a private attribute and access will be removed in a future Ray version.
[36m(TaskRunner pid=862757)[0m WARNING:2025-04-23 07:40:09,459:Waiting for register center actor 5dnHuk_register_center to be ready. Elapsed time: 0 seconds out of 300 seconds.
[36m(TaskRunner pid=862757)[0m                'kl_penalty': 'kl',
[36m(TaskRunner pid=862757)[0m                'lam': 1.0,
[36m(TaskRunner pid=862757)[0m                'norm_adv_by_std_in_grpo': True,
[36m(TaskRunner pid=862757)[0m                'use_kl_in_reward': False},
[36m(TaskRunner pid=862757)[0m  'critic': {'checkpoint': {'contents': ['model', 'optimizer', 'extra']},
[36m(TaskRunner pid=862757)[0m             'cliprange_value': 0.5,
[36m(TaskRunner pid=862757)[0m             'forward_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=862757)[0m             'forward_micro_batch_size': None,
[36m(TaskRunner pid=862757)[0m             'forward_micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=862757)[0m             'grad_clip': 1.0,
[36m(TaskRunner pid=862757)[0m             'model': {'enable_gradient_checkpointing': True,
[36m(TaskRunner pid=862757)[0m                       'external_lib': None,
[36m(TaskRunner pid=862757)[0m                       'fsdp_config': {'fsdp_size': -1,
[36m(TaskRunner pid=862757)[0m                                       'optimizer_offload': False,
[36m(TaskRunner pid=862757)[0m                                       'param_offload': False,
[36m(TaskRunner pid=862757)[0m                                       'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=862757)[0m                       'override_config': {},
[36m(TaskRunner pid=862757)[0m                       'path': '~/models/deepseek-llm-7b-chat',
[36m(TaskRunner pid=862757)[0m                       'tokenizer_path': '/home/wangyc/verl/Qwen/Qwen2___5-7B-Instruct',
[36m(TaskRunner pid=862757)[0m                       'use_remove_padding': False},
[36m(TaskRunner pid=862757)[0m             'optim': {'lr': 1e-05,
[36m(TaskRunner pid=862757)[0m                       'lr_warmup_steps_ratio': 0.0,
[36m(TaskRunner pid=862757)[0m                       'min_lr_ratio': None,
[36m(TaskRunner pid=862757)[0m                       'total_training_steps': -1,
[36m(TaskRunner pid=862757)[0m                       'warmup_style': 'constant',
[36m(TaskRunner pid=862757)[0m                       'weight_decay': 0.01},
[36m(TaskRunner pid=862757)[0m             'ppo_epochs': 1,
[36m(TaskRunner pid=862757)[0m             'ppo_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=862757)[0m             'ppo_micro_batch_size': None,
[36m(TaskRunner pid=862757)[0m             'ppo_micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=862757)[0m             'ppo_mini_batch_size': 64,
[36m(TaskRunner pid=862757)[0m             'rollout_n': 6,
[36m(TaskRunner pid=862757)[0m             'shuffle': False,
[36m(TaskRunner pid=862757)[0m             'strategy': 'fsdp',
[36m(TaskRunner pid=862757)[0m             'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=862757)[0m             'use_dynamic_bsz': False},
[36m(TaskRunner pid=862757)[0m  'custom_reward_function': {'name': 'compute_score', 'path': None},
[36m(TaskRunner pid=862757)[0m  'data': {'custom_cls': {'name': None, 'path': None},
[36m(TaskRunner pid=862757)[0m           'filter_overlong_prompts': False,
[36m(TaskRunner pid=862757)[0m           'filter_overlong_prompts_workers': 1,
[36m(TaskRunner pid=862757)[0m           'image_key': 'images',
[36m(TaskRunner pid=862757)[0m           'max_prompt_length': 1024,
[36m(TaskRunner pid=862757)[0m           'max_response_length': 1024,
[36m(TaskRunner pid=862757)[0m           'prompt_key': 'prompt',
[36m(TaskRunner pid=862757)[0m           'return_raw_chat': False,
[36m(TaskRunner pid=862757)[0m           'return_raw_input_ids': False,
[36m(TaskRunner pid=862757)[0m           'reward_fn_key': 'data_source',
[36m(TaskRunner pid=862757)[0m           'shuffle': True,
[36m(TaskRunner pid=862757)[0m           'tokenizer': None,
[36m(TaskRunner pid=862757)[0m           'train_batch_size': 128,
[36m(TaskRunner pid=862757)[0m           'train_files': '/home/wangyc/verl/data/jec-qa-1-multi-choice/train.parquet',
[36m(TaskRunner pid=862757)[0m           'truncation': 'error',
[36m(TaskRunner pid=862757)[0m           'val_batch_size': 1312,
[36m(TaskRunner pid=862757)[0m           'val_files': '/home/wangyc/verl/data/jec-qa-1-multi-choice/test.parquet',
[36m(TaskRunner pid=862757)[0m           'video_key': 'videos'},
[36m(TaskRunner pid=862757)[0m  'ray_init': {'num_cpus': None},
[36m(TaskRunner pid=862757)[0m  'reward_model': {'enable': False,
[36m(TaskRunner pid=862757)[0m                   'forward_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=862757)[0m                   'max_length': None,
[36m(TaskRunner pid=862757)[0m                   'micro_batch_size': None,
[36m(TaskRunner pid=862757)[0m                   'micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=862757)[0m                   'model': {'external_lib': None,
[36m(TaskRunner pid=862757)[0m                             'fsdp_config': {'fsdp_size': -1,
[36m(TaskRunner pid=862757)[0m                                             'param_offload': False,
[36m(TaskRunner pid=862757)[0m                                             'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=862757)[0m                             'input_tokenizer': '/home/wangyc/verl/Qwen/Qwen2___5-7B-Instruct',
[36m(TaskRunner pid=862757)[0m                             'path': '~/models/FsfairX-LLaMA3-RM-v0.1',
[36m(TaskRunner pid=862757)[0m                             'use_remove_padding': False},
[36m(TaskRunner pid=862757)[0m                   'reward_manager': 'naive',
[36m(TaskRunner pid=862757)[0m                   'strategy': 'fsdp',
[36m(TaskRunner pid=862757)[0m                   'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=862757)[0m                   'use_dynamic_bsz': False},
[36m(TaskRunner pid=862757)[0m  'trainer': {'balance_batch': True,
[36m(TaskRunner pid=862757)[0m              'critic_warmup': 0,
[36m(TaskRunner pid=862757)[0m              'default_hdfs_dir': None,
[36m(TaskRunner pid=862757)[0m              'default_local_dir': 'checkpoints/qwen2.5-7b-grpo-hard-mcq',
[36m(TaskRunner pid=862757)[0m              'del_local_ckpt_after_load': False,
[36m(TaskRunner pid=862757)[0m              'experiment_name': 'qwen2.5-7b-grpo-mcq',
[36m(TaskRunner pid=862757)[0m              'log_val_generations': 0,
[36m(TaskRunner pid=862757)[0m              'logger': ['console', 'wandb'],
[36m(TaskRunner pid=862757)[0m              'max_actor_ckpt_to_keep': None,
[36m(TaskRunner pid=862757)[0m              'max_critic_ckpt_to_keep': None,
[36m(TaskRunner pid=862757)[0m              'n_gpus_per_node': 8,
[36m(TaskRunner pid=862757)[0m              'nnodes': 1,
[36m(TaskRunner pid=862757)[0m              'project_name': 'Lawyer-Zero',
[36m(TaskRunner pid=862757)[0m              'ray_wait_register_center_timeout': 300,
[36m(TaskRunner pid=862757)[0m              'resume_from_path': None,
[36m(TaskRunner pid=862757)[0m              'resume_mode': 'auto',
[36m(TaskRunner pid=862757)[0m              'save_freq': 50,
[36m(TaskRunner pid=862757)[0m              'test_freq': 10,
[36m(TaskRunner pid=862757)[0m              'total_epochs': 2,
[36m(TaskRunner pid=862757)[0m              'total_training_steps': None,
[36m(TaskRunner pid=862757)[0m              'val_before_train': True}}
[36m(TaskRunner pid=862757)[0m WARNING: val_batch_size is deprecated. Validation datasets are sent to inference engines as a whole batch, which will schedule the memory themselves.
[36m(TaskRunner pid=862757)[0m [validate_config] All configuration checks passed successfully!
[36m(TaskRunner pid=862757)[0m dataset len: 8448
[36m(TaskRunner pid=862757)[0m dataset len: 2113
[36m(TaskRunner pid=862757)[0m Size of train dataloader: 66
[36m(TaskRunner pid=862757)[0m Total training steps: 132
[36m(WorkerDict pid=866420)[0m Model config after override: Qwen2Config {
[36m(WorkerDict pid=866420)[0m   "architectures": [
[36m(WorkerDict pid=866420)[0m     "Qwen2ForCausalLM"
[36m(WorkerDict pid=866420)[0m   ],
[36m(WorkerDict pid=866420)[0m You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.
[36m(WorkerDict pid=872415)[0m Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]
[36m(WorkerDict pid=866420)[0m Loading checkpoint shards: 100%|██████████| 4/4 [00:00<00:00, 51.96it/s]
[36m(WorkerDict pid=872408)[0m Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:00<00:00, 65.21it/s]
[36m(WorkerDict pid=866420)[0m [rank0]:[W423 07:40:26.563572730 ProcessGroupNCCL.cpp:4561] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.
[36m(WorkerDict pid=866420)[0m Flash Attention 2.0 only supports torch.float16 and torch.bfloat16 dtypes, but the current dype in Qwen2ForCausalLM is torch.float32. You should run training or inference using Automatic Mixed-Precision via the `with torch.autocast(device_type='torch_device'):` decorator, or load the model with the `torch_dtype` argument. Example: `model = AutoModel.from_pretrained("openai/whisper-tiny", attn_implementation="flash_attention_2", torch_dtype=torch.float16)`
[36m(WorkerDict pid=872413)[0m You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=866420)[0m Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s][32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=872411)[0m Loading checkpoint shards: 100%|██████████| 4/4 [00:00<00:00, 65.08it/s][32m [repeated 5x across cluster][0m
[36m(WorkerDict pid=872413)[0m Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:00<00:00, 61.14it/s]
[36m(WorkerDict pid=872413)[0m [rank5]:[W423 07:40:26.578858641 ProcessGroupNCCL.cpp:4561] [PG ID 0 PG GUID 0 Rank 5]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect. Specify device_ids in barrier() to force use of a particular device, or call init_process_group() with a device_id.[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=866420)[0m Loading checkpoint shards:  25%|██▌       | 1/4 [00:03<00:10,  3.57s/it]
[36m(WorkerDict pid=872413)[0m Flash Attention 2.0 only supports torch.float16 and torch.bfloat16 dtypes, but the current dype in Qwen2ForCausalLM is torch.float32. You should run training or inference using Automatic Mixed-Precision via the `with torch.autocast(device_type='torch_device'):` decorator, or load the model with the `torch_dtype` argument. Example: `model = AutoModel.from_pretrained("openai/whisper-tiny", attn_implementation="flash_attention_2", torch_dtype=torch.float16)`[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=872411)[0m Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=872408)[0m Loading checkpoint shards:  75%|███████▌  | 3/4 [00:10<00:03,  3.53s/it][32m [repeated 16x across cluster][0m
[36m(WorkerDict pid=872408)[0m Loading checkpoint shards: 100%|██████████| 4/4 [00:14<00:00,  3.47s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:14<00:00,  3.51s/it]
[36m(WorkerDict pid=872407)[0m /home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:690: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
[36m(WorkerDict pid=872407)[0m   warnings.warn(
[36m(WorkerDict pid=872414)[0m Loading checkpoint shards:  75%|███████▌  | 3/4 [00:11<00:03,  3.86s/it][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=872414)[0m Loading checkpoint shards: 100%|██████████| 4/4 [00:15<00:00,  3.75s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:15<00:00,  3.80s/it][32m [repeated 7x across cluster][0m
[36m(TaskRunner pid=862757)[0m wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
[36m(TaskRunner pid=862757)[0m wandb: Currently logged in as: eang333cms (eang333cms-peking-university) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
[36m(TaskRunner pid=862757)[0m wandb: Tracking run with wandb version 0.19.9
[36m(TaskRunner pid=862757)[0m wandb: Run data is saved locally in /home/wangyc/verl/wandb/run-20250423_074115-07x81wjz
[36m(TaskRunner pid=862757)[0m wandb: Run `wandb offline` to turn off syncing.
[36m(TaskRunner pid=862757)[0m wandb: Syncing run qwen2.5-7b-grpo-mcq
[36m(TaskRunner pid=862757)[0m wandb: ⭐️ View project at https://wandb.ai/eang333cms-peking-university/Lawyer-Zero
[36m(TaskRunner pid=862757)[0m wandb: 🚀 View run at https://wandb.ai/eang333cms-peking-university/Lawyer-Zero/runs/07x81wjz
[36m(WorkerDict pid=866420)[0m   "attention_dropout": 0.0,
[36m(WorkerDict pid=866420)[0m   "eos_token_id": 151645,
[36m(WorkerDict pid=866420)[0m   "hidden_act": "silu",
[36m(WorkerDict pid=866420)[0m   "hidden_size": 3584,
[36m(WorkerDict pid=866420)[0m   "initializer_range": 0.02,
[36m(WorkerDict pid=866420)[0m   "intermediate_size": 18944,
[36m(WorkerDict pid=866420)[0m   "max_position_embeddings": 32768,
[36m(WorkerDict pid=866420)[0m   "max_window_layers": 28,
[36m(WorkerDict pid=866420)[0m   "model_type": "qwen2",
[36m(WorkerDict pid=866420)[0m   "num_attention_heads": 28,
[36m(WorkerDict pid=866420)[0m   "num_hidden_layers": 28,
[36m(WorkerDict pid=866420)[0m   "num_key_value_heads": 4,
[36m(WorkerDict pid=866420)[0m   "pad_token_id": 151643,
[36m(WorkerDict pid=866420)[0m   "rms_norm_eps": 1e-06,
[36m(WorkerDict pid=866420)[0m   "rope_scaling": null,
[36m(WorkerDict pid=866420)[0m   "rope_theta": 1000000.0,
[36m(WorkerDict pid=866420)[0m   "sliding_window": 131072,
[36m(WorkerDict pid=866420)[0m   "tie_word_embeddings": false,
[36m(WorkerDict pid=866420)[0m   "torch_dtype": "bfloat16",
[36m(WorkerDict pid=866420)[0m   "transformers_version": "4.51.3",
[36m(WorkerDict pid=866420)[0m   "use_cache": true,
[36m(WorkerDict pid=866420)[0m   "use_sliding_window": false,
[36m(WorkerDict pid=866420)[0m   "vocab_size": 152064
[36m(WorkerDict pid=866420)[0m }
[36m(WorkerDict pid=866420)[0m 
[36m(WorkerDict pid=866420)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention
[36m(WorkerDict pid=866420)[0m NCCL version 2.21.5+cuda12.4
[36m(WorkerDict pid=866420)[0m Qwen2ForCausalLM contains 7.62B parameters
[36m(WorkerDict pid=866420)[0m wrap_policy: functools.partial(<function _or_policy at 0x7f80a5454280>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x7f80a5454160>, transformer_layer_cls={<class 'transformers.models.qwen2.modeling_qwen2.Qwen2DecoderLayer'>})])
[36m(WorkerDict pid=866420)[0m Actor use_remove_padding=True
[36m(WorkerDict pid=872413)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention[32m [repeated 7x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)[0m
[36m(WorkerDict pid=872413)[0m wrap_policy: functools.partial(<function _or_policy at 0x7f80b9040280>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x7f80b9040160>, transformer_layer_cls={<class 'transformers.models.qwen2.modeling_qwen2.Qwen2DecoderLayer'>})])[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=866420)[0m Model config after override: Qwen2Config {
[36m(WorkerDict pid=866420)[0m   "architectures": [
[36m(WorkerDict pid=866420)[0m     "Qwen2ForCausalLM"
[36m(WorkerDict pid=866420)[0m   ],
[36m(WorkerDict pid=866420)[0m   "attention_dropout": 0.0,
[36m(WorkerDict pid=866420)[0m   "eos_token_id": 151645,
[36m(WorkerDict pid=866420)[0m   "hidden_act": "silu",
[36m(WorkerDict pid=866420)[0m   "hidden_size": 3584,
[36m(WorkerDict pid=866420)[0m   "initializer_range": 0.02,
[36m(WorkerDict pid=866420)[0m   "intermediate_size": 18944,
[36m(WorkerDict pid=866420)[0m   "max_position_embeddings": 32768,
[36m(WorkerDict pid=866420)[0m   "max_window_layers": 28,
[36m(WorkerDict pid=866420)[0m   "model_type": "qwen2",
[36m(WorkerDict pid=866420)[0m   "num_attention_heads": 28,
[36m(WorkerDict pid=866420)[0m   "num_hidden_layers": 28,
[36m(WorkerDict pid=866420)[0m   "num_key_value_heads": 4,
[36m(WorkerDict pid=866420)[0m   "pad_token_id": 151643,
[36m(WorkerDict pid=866420)[0m   "rms_norm_eps": 1e-06,
[36m(WorkerDict pid=866420)[0m   "rope_scaling": null,
[36m(WorkerDict pid=866420)[0m   "rope_theta": 1000000.0,
[36m(WorkerDict pid=866420)[0m   "sliding_window": 131072,
[36m(WorkerDict pid=866420)[0m   "tie_word_embeddings": false,
[36m(WorkerDict pid=866420)[0m   "torch_dtype": "bfloat16",
[36m(WorkerDict pid=866420)[0m   "transformers_version": "4.51.3",
[36m(WorkerDict pid=866420)[0m   "use_cache": true,
[36m(WorkerDict pid=866420)[0m   "use_sliding_window": false,
[36m(WorkerDict pid=866420)[0m   "vocab_size": 152064
[36m(WorkerDict pid=866420)[0m }
[36m(WorkerDict pid=866420)[0m 
[36m(WorkerDict pid=872413)[0m Actor use_remove_padding=True[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=872408)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention
[36m(WorkerDict pid=872407)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention
[36m(WorkerDict pid=866420)[0m Qwen2ForCausalLM contains 7.62B parameters
[36m(WorkerDict pid=866420)[0m wrap_policy: functools.partial(<function _or_policy at 0x7f80a5454280>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x7f80a5454160>, transformer_layer_cls={<class 'transformers.models.qwen2.modeling_qwen2.Qwen2DecoderLayer'>})])
[36m(WorkerDict pid=872409)[0m Total steps: 132, num_warmup_steps: 0
[36m(WorkerDict pid=872409)[0m Actor use_remove_padding=True
[36m(WorkerDict pid=872414)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention[32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=872413)[0m wrap_policy: functools.partial(<function _or_policy at 0x7f80b9040280>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x7f80b9040160>, transformer_layer_cls={<class 'transformers.models.qwen2.modeling_qwen2.Qwen2DecoderLayer'>})])[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=872414)[0m Actor use_remove_padding=True
[36m(WorkerDict pid=866420)[0m Before building vllm rollout, memory allocated (GB): 3.5471720695495605, memory reserved (GB): 19.66015625
[36m(WorkerDict pid=872407)[0m WARNING 04-23 07:41:00 [cuda.py:96] To see benefits of async output processing, enable CUDA graph. Since, enforce-eager is enabled, async output processor cannot be used
[36m(WorkerDict pid=866420)[0m Total steps: 132, num_warmup_steps: 0[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=866420)[0m Actor use_remove_padding=True[32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=872407)[0m WARNING 04-23 07:41:01 [utils.py:2413] Methods determine_num_available_blocks,device_config,get_cache_block_size_bytes,initialize_cache not implemented in <vllm.v1.worker.gpu_worker.Worker object at 0x7f8fb92a80d0>
[36m(WorkerDict pid=872414)[0m NCCL version 2.21.5+cuda12.4
[36m(WorkerDict pid=872407)[0m kwargs: {'n': 6, 'logprobs': 0, 'max_tokens': 1024, 'detokenize': False, 'temperature': 1.0, 'top_k': -1, 'top_p': 1, 'ignore_eos': False}
[36m(WorkerDict pid=866420)[0m WARNING 04-23 07:41:02 [cuda.py:96] To see benefits of async output processing, enable CUDA graph. Since, enforce-eager is enabled, async output processor cannot be used[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=866420)[0m WARNING 04-23 07:41:02 [utils.py:2413] Methods determine_num_available_blocks,device_config,get_cache_block_size_bytes,initialize_cache not implemented in <vllm.v1.worker.gpu_worker.Worker object at 0x7f7dc0774ac0>[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=872408)[0m NCCL version 2.21.5+cuda12.4[32m [repeated 2x across cluster][0m
[36m(WorkerDict pid=866420)[0m After building vllm rollout, memory allocated (GB): 23.271320343017578, memory reserved (GB): 27.1484375
[36m(WorkerDict pid=866420)[0m After building sharding manager, memory allocated (GB): 23.271320343017578, memory reserved (GB): 27.1484375
[36m(TaskRunner pid=862757)[0m Using LocalLogger is deprecated. The constructor API will change 
[36m(TaskRunner pid=862757)[0m Checkpoint tracker file does not exist: %s /home/wangyc/verl/checkpoints/qwen2.5-7b-grpo-hard-mcq/latest_checkpointed_iteration.txt
[36m(TaskRunner pid=862757)[0m Training from scratch
[36m(TaskRunner pid=862757)[0m Training Progress:   0%|          | 0/132 [00:00<?, ?it/s]
[36m(WorkerDict pid=872413)[0m /home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:690: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=872413)[0m   warnings.warn([32m [repeated 7x across cluster][0m
[36m(TaskRunner pid=862757)[0m Training Progress:   1%|          | 1/132 [01:14<2:42:33, 74.45s/it]
[36m(TaskRunner pid=862757)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_update_actor()[39m (pid=872413, ip=222.29.51.203, actor_id=54d565d8ab4c8e704aa6951e01000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f8057d609d0>)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=862757)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=862757)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 514, in update_actor
[36m(TaskRunner pid=862757)[0m     metrics = self.actor.update_policy(data=data)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 61, in f
[36m(TaskRunner pid=862757)[0m     return self.log(decorated_function, *args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 70, in log
[36m(TaskRunner pid=862757)[0m     output = func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/actor/dp_actor.py", line 381, in update_policy
[36m(TaskRunner pid=862757)[0m     loss.backward()
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/_tensor.py", line 626, in backward
[36m(TaskRunner pid=862757)[0m     torch.autograd.backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
[36m(TaskRunner pid=862757)[0m     _engine_run_backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
[36m(TaskRunner pid=862757)[0m     return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
[36m(TaskRunner pid=862757)[0m torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 5.76 GiB. GPU 0 has a total capacity of 44.53 GiB of which 4.52 GiB is free. Including non-PyTorch memory, this process has 39.97 GiB memory in use. Of the allocated memory 54.20 GiB is allocated by PyTorch, with 143.22 MiB allocated in private pools (e.g., CUDA Graphs), and 4.77 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[36m(TaskRunner pid=862757)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_update_actor()[39m (pid=872408, ip=222.29.51.203, actor_id=776a525c6c5352a9786ed5a401000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7fc27160c910>)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=862757)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=862757)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 514, in update_actor
[36m(TaskRunner pid=862757)[0m     metrics = self.actor.update_policy(data=data)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 61, in f
[36m(TaskRunner pid=862757)[0m     return self.log(decorated_function, *args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 70, in log
[36m(TaskRunner pid=862757)[0m     output = func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/actor/dp_actor.py", line 381, in update_policy
[36m(TaskRunner pid=862757)[0m     loss.backward()
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/_tensor.py", line 626, in backward
[36m(TaskRunner pid=862757)[0m     torch.autograd.backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
[36m(TaskRunner pid=862757)[0m     _engine_run_backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
[36m(TaskRunner pid=862757)[0m     return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
[36m(TaskRunner pid=862757)[0m torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 5.69 GiB. GPU 0 has a total capacity of 44.53 GiB of which 5.05 GiB is free. Including non-PyTorch memory, this process has 39.44 GiB memory in use. Of the allocated memory 53.94 GiB is allocated by PyTorch, with 143.22 MiB allocated in private pools (e.g., CUDA Graphs), and 4.50 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[36m(TaskRunner pid=862757)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_update_actor()[39m (pid=872407, ip=222.29.51.203, actor_id=e97c93f8b9b7dc49e34a07c101000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f90a6454a90>)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=862757)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=862757)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 514, in update_actor
[36m(TaskRunner pid=862757)[0m     metrics = self.actor.update_policy(data=data)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 61, in f
[36m(TaskRunner pid=862757)[0m     return self.log(decorated_function, *args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 70, in log
[36m(TaskRunner pid=862757)[0m     output = func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/actor/dp_actor.py", line 381, in update_policy
[36m(TaskRunner pid=862757)[0m     loss.backward()
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/_tensor.py", line 626, in backward
[36m(TaskRunner pid=862757)[0m     torch.autograd.backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
[36m(TaskRunner pid=862757)[0m     _engine_run_backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
[36m(TaskRunner pid=862757)[0m     return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
[36m(TaskRunner pid=862757)[0m torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 5.76 GiB. GPU 0 has a total capacity of 44.53 GiB of which 5.08 GiB is free. Including non-PyTorch memory, this process has 39.41 GiB memory in use. Of the allocated memory 48.44 GiB is allocated by PyTorch, with 143.22 MiB allocated in private pools (e.g., CUDA Graphs), and 9.97 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[36m(TaskRunner pid=862757)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_update_actor()[39m (pid=872411, ip=222.29.51.203, actor_id=e6e7ec11646a95e748cb24b301000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f104447c940>)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=862757)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=862757)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 514, in update_actor
[36m(TaskRunner pid=862757)[0m     metrics = self.actor.update_policy(data=data)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 61, in f
[36m(TaskRunner pid=862757)[0m     return self.log(decorated_function, *args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 70, in log
[36m(TaskRunner pid=862757)[0m     output = func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/actor/dp_actor.py", line 381, in update_policy
[36m(TaskRunner pid=862757)[0m     loss.backward()
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/_tensor.py", line 626, in backward
[36m(TaskRunner pid=862757)[0m     torch.autograd.backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
[36m(TaskRunner pid=862757)[0m     _engine_run_backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
[36m(TaskRunner pid=862757)[0m     return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
[36m(TaskRunner pid=862757)[0m torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 5.80 GiB. GPU 0 has a total capacity of 44.53 GiB of which 4.95 GiB is free. Including non-PyTorch memory, this process has 39.53 GiB memory in use. Of the allocated memory 48.57 GiB is allocated by PyTorch, with 143.22 MiB allocated in private pools (e.g., CUDA Graphs), and 9.99 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[36m(TaskRunner pid=862757)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_update_actor()[39m (pid=866420, ip=222.29.51.203, actor_id=3b99f284f5b00a3c0ccdb7ca01000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f7faf0b08e0>)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=862757)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=862757)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 514, in update_actor
[36m(TaskRunner pid=862757)[0m     metrics = self.actor.update_policy(data=data)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 61, in f
[36m(TaskRunner pid=862757)[0m     return self.log(decorated_function, *args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 70, in log
[36m(TaskRunner pid=862757)[0m     output = func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/actor/dp_actor.py", line 381, in update_policy
[36m(TaskRunner pid=862757)[0m     loss.backward()
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/_tensor.py", line 626, in backward
[36m(TaskRunner pid=862757)[0m     torch.autograd.backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
[36m(TaskRunner pid=862757)[0m     _engine_run_backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
[36m(TaskRunner pid=862757)[0m     return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
[36m(TaskRunner pid=862757)[0m torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 5.71 GiB. GPU 0 has a total capacity of 44.53 GiB of which 1011.25 MiB is free. Including non-PyTorch memory, this process has 43.50 GiB memory in use. Of the allocated memory 53.98 GiB is allocated by PyTorch, with 143.22 MiB allocated in private pools (e.g., CUDA Graphs), and 8.55 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[36m(TaskRunner pid=862757)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_update_actor()[39m (pid=872414, ip=222.29.51.203, actor_id=870ecc3474a9e7e97dee2c0901000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7fb0de4b0a00>)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=862757)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=862757)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 514, in update_actor
[36m(TaskRunner pid=862757)[0m     metrics = self.actor.update_policy(data=data)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 61, in f
[36m(TaskRunner pid=862757)[0m     return self.log(decorated_function, *args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 70, in log
[36m(TaskRunner pid=862757)[0m     output = func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/actor/dp_actor.py", line 381, in update_policy
[36m(TaskRunner pid=862757)[0m     loss.backward()
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/_tensor.py", line 626, in backward
[36m(TaskRunner pid=862757)[0m     torch.autograd.backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
[36m(TaskRunner pid=862757)[0m     _engine_run_backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
[36m(TaskRunner pid=862757)[0m     return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
[36m(TaskRunner pid=862757)[0m torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 5.73 GiB. GPU 0 has a total capacity of 44.53 GiB of which 5.72 GiB is free. Including non-PyTorch memory, this process has 38.77 GiB memory in use. Of the allocated memory 54.08 GiB is allocated by PyTorch, with 143.22 MiB allocated in private pools (e.g., CUDA Graphs), and 3.69 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[36m(TaskRunner pid=862757)[0m Unhandled error (suppress with 'RAY_IGNORE_UNHANDLED_ERRORS=1'): [36mray::WorkerDict.actor_rollout_update_actor()[39m (pid=872415, ip=222.29.51.203, actor_id=4d0f845e4c235a751cc9d67001000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f93869c8910>)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
[36m(TaskRunner pid=862757)[0m     return getattr(self.worker_dict[key], name)(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
[36m(TaskRunner pid=862757)[0m     return func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 514, in update_actor
[36m(TaskRunner pid=862757)[0m     metrics = self.actor.update_policy(data=data)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 61, in f
[36m(TaskRunner pid=862757)[0m     return self.log(decorated_function, *args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/utils/debug/performance.py", line 70, in log
[36m(TaskRunner pid=862757)[0m     output = func(*args, **kwargs)
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/verl/verl/workers/actor/dp_actor.py", line 381, in update_policy
[36m(TaskRunner pid=862757)[0m     loss.backward()
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/_tensor.py", line 626, in backward
[36m(TaskRunner pid=862757)[0m     torch.autograd.backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
[36m(TaskRunner pid=862757)[0m     _engine_run_backward(
[36m(TaskRunner pid=862757)[0m   File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
[36m(TaskRunner pid=862757)[0m     return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
[36m(TaskRunner pid=862757)[0m torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 5.85 GiB. GPU 0 has a total capacity of 44.53 GiB of which 1.01 GiB is free. Including non-PyTorch memory, this process has 43.47 GiB memory in use. Of the allocated memory 54.56 GiB is allocated by PyTorch, with 143.22 MiB allocated in private pools (e.g., CUDA Graphs), and 7.94 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[36m(TaskRunner pid=862757)[0m wandb: uploading output.log; uploading wandb-summary.json; uploading config.yaml
[36m(TaskRunner pid=862757)[0m wandb:                                                                                
[36m(TaskRunner pid=862757)[0m wandb: 
[36m(TaskRunner pid=862757)[0m wandb: Run history:
[36m(TaskRunner pid=862757)[0m wandb:                                   actor/entropy_loss ▁
[36m(TaskRunner pid=862757)[0m wandb:                                      actor/grad_norm ▁
[36m(TaskRunner pid=862757)[0m wandb:                                        actor/kl_coef ▁
[36m(TaskRunner pid=862757)[0m wandb:                                        actor/kl_loss ▁
[36m(TaskRunner pid=862757)[0m wandb:                                             actor/lr ▁
[36m(TaskRunner pid=862757)[0m wandb:                                    actor/pg_clipfrac ▁
[36m(TaskRunner pid=862757)[0m wandb:                              actor/pg_clipfrac_lower ▁
[36m(TaskRunner pid=862757)[0m wandb:                                        actor/pg_loss ▁
[36m(TaskRunner pid=862757)[0m wandb:                                         actor/ppo_kl ▁
[36m(TaskRunner pid=862757)[0m wandb:                                critic/advantages/max ▁
[36m(TaskRunner pid=862757)[0m wandb:                               critic/advantages/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:                                critic/advantages/min ▁
[36m(TaskRunner pid=862757)[0m wandb:                                   critic/returns/max ▁
[36m(TaskRunner pid=862757)[0m wandb:                                  critic/returns/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:                                   critic/returns/min ▁
[36m(TaskRunner pid=862757)[0m wandb:                                   critic/rewards/max ▁
[36m(TaskRunner pid=862757)[0m wandb:                                  critic/rewards/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:                                   critic/rewards/min ▁
[36m(TaskRunner pid=862757)[0m wandb:                                     critic/score/max ▁
[36m(TaskRunner pid=862757)[0m wandb:                                    critic/score/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:                                     critic/score/min ▁
[36m(TaskRunner pid=862757)[0m wandb:                           global_seqlen/balanced_max ▁
[36m(TaskRunner pid=862757)[0m wandb:                           global_seqlen/balanced_min ▁
[36m(TaskRunner pid=862757)[0m wandb:                                    global_seqlen/max ▁
[36m(TaskRunner pid=862757)[0m wandb:                                   global_seqlen/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:                                    global_seqlen/min ▁
[36m(TaskRunner pid=862757)[0m wandb:                            global_seqlen/minmax_diff ▁
[36m(TaskRunner pid=862757)[0m wandb:                              perf/cpu_memory_used_gb ▁
[36m(TaskRunner pid=862757)[0m wandb:                         perf/max_memory_allocated_gb ▁
[36m(TaskRunner pid=862757)[0m wandb:                          perf/max_memory_reserved_gb ▁
[36m(TaskRunner pid=862757)[0m wandb:                                       perf/mfu/actor ▁
[36m(TaskRunner pid=862757)[0m wandb:                                      perf/throughput ▁
[36m(TaskRunner pid=862757)[0m wandb:                                   perf/time_per_step ▁
[36m(TaskRunner pid=862757)[0m wandb:                                perf/total_num_tokens ▁
[36m(TaskRunner pid=862757)[0m wandb:                             prompt_length/clip_ratio ▁
[36m(TaskRunner pid=862757)[0m wandb:                                    prompt_length/max ▁
[36m(TaskRunner pid=862757)[0m wandb:                                   prompt_length/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:                                    prompt_length/min ▁
[36m(TaskRunner pid=862757)[0m wandb:                           response_length/clip_ratio ▁
[36m(TaskRunner pid=862757)[0m wandb:                                  response_length/max ▁
[36m(TaskRunner pid=862757)[0m wandb:                                 response_length/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:                                  response_length/min ▁
[36m(TaskRunner pid=862757)[0m wandb:                              timing_per_token_ms/adv ▁
[36m(TaskRunner pid=862757)[0m wandb:                              timing_per_token_ms/gen ▁
[36m(TaskRunner pid=862757)[0m wandb:                              timing_per_token_ms/ref ▁
[36m(TaskRunner pid=862757)[0m wandb:                     timing_per_token_ms/update_actor ▁
[36m(TaskRunner pid=862757)[0m wandb:                                         timing_s/adv ▁
[36m(TaskRunner pid=862757)[0m wandb:                                         timing_s/gen ▁
[36m(TaskRunner pid=862757)[0m wandb:                                timing_s/old_log_prob ▁
[36m(TaskRunner pid=862757)[0m wandb:                                         timing_s/ref ▁
[36m(TaskRunner pid=862757)[0m wandb:                                        timing_s/step ▁
[36m(TaskRunner pid=862757)[0m wandb:                                timing_s/update_actor ▁
[36m(TaskRunner pid=862757)[0m wandb: val-aux/jec-qa-1-multi-choice/extra_info/score/std@1 ▁
[36m(TaskRunner pid=862757)[0m wandb:     val-aux/jec-qa-1-multi-choice/extra_info/score@1 ▁
[36m(TaskRunner pid=862757)[0m wandb:           val-aux/jec-qa-1-multi-choice/reward/std@1 ▁
[36m(TaskRunner pid=862757)[0m wandb:    val-aux/jec-qa-1-multi-choice/reward/worst@1/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:     val-aux/jec-qa-1-multi-choice/reward/worst@1/std ▁
[36m(TaskRunner pid=862757)[0m wandb:      val-aux/jec-qa-1-multi-choice/score/best@1/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:       val-aux/jec-qa-1-multi-choice/score/best@1/std ▁
[36m(TaskRunner pid=862757)[0m wandb:           val-aux/jec-qa-1-multi-choice/score/mean@1 ▁
[36m(TaskRunner pid=862757)[0m wandb:            val-aux/jec-qa-1-multi-choice/score/std@1 ▁
[36m(TaskRunner pid=862757)[0m wandb:     val-aux/jec-qa-1-multi-choice/score/worst@1/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:      val-aux/jec-qa-1-multi-choice/score/worst@1/std ▁
[36m(TaskRunner pid=862757)[0m wandb:    val-core/jec-qa-1-multi-choice/reward/best@1/mean ▁
[36m(TaskRunner pid=862757)[0m wandb:     val-core/jec-qa-1-multi-choice/reward/best@1/std ▁
[36m(TaskRunner pid=862757)[0m wandb:         val-core/jec-qa-1-multi-choice/reward/mean@1 ▁
[36m(TaskRunner pid=862757)[0m wandb: 
[36m(TaskRunner pid=862757)[0m wandb: Run summary:
[36m(TaskRunner pid=862757)[0m wandb:                                   actor/entropy_loss 1.19284
[36m(TaskRunner pid=862757)[0m wandb:                                      actor/grad_norm 2.15596
[36m(TaskRunner pid=862757)[0m wandb:                                        actor/kl_coef 0.001
[36m(TaskRunner pid=862757)[0m wandb:                                        actor/kl_loss 0.00089
[36m(TaskRunner pid=862757)[0m wandb:                                             actor/lr 0.0
[36m(TaskRunner pid=862757)[0m wandb:                                    actor/pg_clipfrac 0.00073
[36m(TaskRunner pid=862757)[0m wandb:                              actor/pg_clipfrac_lower 0
[36m(TaskRunner pid=862757)[0m wandb:                                        actor/pg_loss 0.10935
[36m(TaskRunner pid=862757)[0m wandb:                                         actor/ppo_kl 0.00011
[36m(TaskRunner pid=862757)[0m wandb:                                critic/advantages/max 2.04124
[36m(TaskRunner pid=862757)[0m wandb:                               critic/advantages/mean -0.01127
[36m(TaskRunner pid=862757)[0m wandb:                                critic/advantages/min -2.04124
[36m(TaskRunner pid=862757)[0m wandb:                                   critic/returns/max 2.04124
[36m(TaskRunner pid=862757)[0m wandb:                                  critic/returns/mean -0.01127
[36m(TaskRunner pid=862757)[0m wandb:                                   critic/returns/min -2.04124
[36m(TaskRunner pid=862757)[0m wandb:                                   critic/rewards/max 2
[36m(TaskRunner pid=862757)[0m wandb:                                  critic/rewards/mean 0.86133
[36m(TaskRunner pid=862757)[0m wandb:                                   critic/rewards/min 0
[36m(TaskRunner pid=862757)[0m wandb:                                     critic/score/max 2
[36m(TaskRunner pid=862757)[0m wandb:                                    critic/score/mean 0.86133
[36m(TaskRunner pid=862757)[0m wandb:                                     critic/score/min 0
[36m(TaskRunner pid=862757)[0m wandb:                           global_seqlen/balanced_max 59188
[36m(TaskRunner pid=862757)[0m wandb:                           global_seqlen/balanced_min 59187
[36m(TaskRunner pid=862757)[0m wandb:                                    global_seqlen/max 61927
[36m(TaskRunner pid=862757)[0m wandb:                                   global_seqlen/mean 59187.375
[36m(TaskRunner pid=862757)[0m wandb:                                    global_seqlen/min 57077
[36m(TaskRunner pid=862757)[0m wandb:                            global_seqlen/minmax_diff 4850
[36m(TaskRunner pid=862757)[0m wandb:                              perf/cpu_memory_used_gb 52.39796
[36m(TaskRunner pid=862757)[0m wandb:                         perf/max_memory_allocated_gb 58.20908
[36m(TaskRunner pid=862757)[0m wandb:                          perf/max_memory_reserved_gb 63.41797
[36m(TaskRunner pid=862757)[0m wandb:                                       perf/mfu/actor 0.47207
[36m(TaskRunner pid=862757)[0m wandb:                                      perf/throughput 800.05503
[36m(TaskRunner pid=862757)[0m wandb:                                   perf/time_per_step 73.97913
[36m(TaskRunner pid=862757)[0m wandb:                                perf/total_num_tokens 473499
[36m(TaskRunner pid=862757)[0m wandb:                             prompt_length/clip_ratio 0
[36m(TaskRunner pid=862757)[0m wandb:                                    prompt_length/max 471
[36m(TaskRunner pid=862757)[0m wandb:                                   prompt_length/mean 304.26562
[36m(TaskRunner pid=862757)[0m wandb:                                    prompt_length/min 209
[36m(TaskRunner pid=862757)[0m wandb:                           response_length/clip_ratio 0
[36m(TaskRunner pid=862757)[0m wandb:                                  response_length/max 834
[36m(TaskRunner pid=862757)[0m wandb:                                 response_length/mean 312.26953
[36m(TaskRunner pid=862757)[0m wandb:                                  response_length/min 103
[36m(TaskRunner pid=862757)[0m wandb:                              timing_per_token_ms/adv 0.00068
[36m(TaskRunner pid=862757)[0m wandb:                              timing_per_token_ms/gen 0.10155
[36m(TaskRunner pid=862757)[0m wandb:                              timing_per_token_ms/ref 0.02269
[36m(TaskRunner pid=862757)[0m wandb:                     timing_per_token_ms/update_actor 0.06805
[36m(TaskRunner pid=862757)[0m wandb:                                         timing_s/adv 0.32168
[36m(TaskRunner pid=862757)[0m wandb:                                         timing_s/gen 24.35295
[36m(TaskRunner pid=862757)[0m wandb:                                timing_s/old_log_prob 6.32098
[36m(TaskRunner pid=862757)[0m wandb:                                         timing_s/ref 10.74175
[36m(TaskRunner pid=862757)[0m wandb:                                        timing_s/step 73.97913
[36m(TaskRunner pid=862757)[0m wandb:                                timing_s/update_actor 32.22009
[36m(TaskRunner pid=862757)[0m wandb: val-aux/jec-qa-1-multi-choice/extra_info/score/std@1 0
[36m(TaskRunner pid=862757)[0m wandb:     val-aux/jec-qa-1-multi-choice/extra_info/score@1 0
[36m(TaskRunner pid=862757)[0m wandb:           val-aux/jec-qa-1-multi-choice/reward/std@1 0
[36m(TaskRunner pid=862757)[0m wandb:    val-aux/jec-qa-1-multi-choice/reward/worst@1/mean 0.95575
[36m(TaskRunner pid=862757)[0m wandb:     val-aux/jec-qa-1-multi-choice/reward/worst@1/std 0
[36m(TaskRunner pid=862757)[0m wandb:      val-aux/jec-qa-1-multi-choice/score/best@1/mean 0.95575
[36m(TaskRunner pid=862757)[0m wandb:       val-aux/jec-qa-1-multi-choice/score/best@1/std 0.0
[36m(TaskRunner pid=862757)[0m wandb:           val-aux/jec-qa-1-multi-choice/score/mean@1 0.95575
[36m(TaskRunner pid=862757)[0m wandb:            val-aux/jec-qa-1-multi-choice/score/std@1 0
[36m(TaskRunner pid=862757)[0m wandb:     val-aux/jec-qa-1-multi-choice/score/worst@1/mean 0.95575
[36m(TaskRunner pid=862757)[0m wandb:      val-aux/jec-qa-1-multi-choice/score/worst@1/std 0.0
[36m(TaskRunner pid=862757)[0m wandb:    val-core/jec-qa-1-multi-choice/reward/best@1/mean 0.95575
[36m(TaskRunner pid=862757)[0m wandb:     val-core/jec-qa-1-multi-choice/reward/best@1/std 0
[36m(TaskRunner pid=862757)[0m wandb:         val-core/jec-qa-1-multi-choice/reward/mean@1 0.95575
[36m(TaskRunner pid=862757)[0m wandb: 
[36m(TaskRunner pid=862757)[0m wandb: 🚀 View run qwen2.5-7b-grpo-mcq at: https://wandb.ai/eang333cms-peking-university/Lawyer-Zero/runs/07x81wjz
[36m(TaskRunner pid=862757)[0m wandb: ⭐️ View project at: https://wandb.ai/eang333cms-peking-university/Lawyer-Zero
[36m(TaskRunner pid=862757)[0m wandb: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
[36m(TaskRunner pid=862757)[0m wandb: Find logs at: ./wandb/run-20250423_074115-07x81wjz/logs
[36m(TaskRunner pid=862757)[0m Training Progress:   1%|          | 1/132 [01:56<4:13:54, 116.29s/it]
[36m(TaskRunner pid=862757)[0m test_gen_batch meta info: {'eos_token_id': 151645, 'pad_token_id': 151643, 'recompute_log_prob': False, 'do_sample': False, 'validate': True}
[36m(WorkerDict pid=872413)[0m kwargs: {'n': 6, 'logprobs': 0, 'max_tokens': 1024, 'detokenize': False, 'temperature': 1.0, 'top_k': -1, 'top_p': 1, 'ignore_eos': False}[32m [repeated 7x across cluster][0m
[36m(TaskRunner pid=862757)[0m validation generation end
[36m(TaskRunner pid=862757)[0m [prompt] system
[36m(TaskRunner pid=862757)[0m 用户和助手之间的对话。用户提出一个问题，由助手来回答。助手首先在脑海中逐步思考推理过程，然后向用户提供答案。推理过程和答案分别用<思考> </思考>和<回答> </回答>标签括起来，即，<思考> 推理过程 </思考><回答> 答案 </回答>
[36m(TaskRunner pid=862757)[0m user
[36m(TaskRunner pid=862757)[0m 你是一名法学专家。现在请你解答司法考试中的一道选择题，请你找出所有正确的选项。每道题可能有一个或者多个正确答案。在解答之前，你需要先针对每个提供的选项给出详细的解释。你需要在回答的最后用大括号圈出给出的答案，例如"{B}"或者"{ABD}"。
[36m(TaskRunner pid=862757)[0m 
[36m(TaskRunner pid=862757)[0m 问题：甲某以为境外窃取、刺探、收买国家秘密的故意，乙以非法获取国家秘密的故意，共谋共同窃取、刺探、收买国家秘密，对于甲乙二人的行为的认定，下列正确的选项是:
[36m(TaskRunner pid=862757)[0m 
[36m(TaskRunner pid=862757)[0m 选项：
[36m(TaskRunner pid=862757)[0m A: 甲与乙因故意不同，不成立共同犯罪
[36m(TaskRunner pid=862757)[0m B: 甲与乙虽故意不同，仍在非法获取国家秘密罪的范围内成立共同犯罪
[36m(TaskRunner pid=862757)[0m C: 对甲应以为境外窃取、刺探、收买国家秘密罪论处
[36m(TaskRunner pid=862757)[0m D: 对乙以非法获取国家秘密罪论处
[36m(TaskRunner pid=862757)[0m assistant
[36m(TaskRunner pid=862757)[0m 
[36m(TaskRunner pid=862757)[0m [response] <思考> 本题考查共同犯罪的认定。根据我国刑法，共同犯罪是指二人以上共同故意犯罪。共同犯罪的成立需要共同的犯罪故意和共同的行为。甲某以为境外窃取、刺探、收买国家秘密的故意，乙以非法获取国家秘密的故意，虽然两人的故意不同，但都涉及窃取、刺探、收买国家秘密的行为，因此在非法获取国家秘密罪的范围内成立共同犯罪。甲某的行为符合以境外窃取、刺探、收买国家秘密罪的构成要件，乙的行为符合非法获取国家秘密罪的构成要件。因此，选项B和C、D都是正确的。
[36m(TaskRunner pid=862757)[0m </思考><回答> 选项B、C、D都是正确的。甲与乙虽故意不同，但在非法获取国家秘密罪的范围内成立共同犯罪。对甲应以为境外窃取、刺探、收买国家秘密罪论处，对乙以非法获取国家秘密罪论处。{BCD}
[36m(TaskRunner pid=862757)[0m [ground_truth] ['B', 'C', 'D']
[36m(TaskRunner pid=862757)[0m [score] 1.0
[36m(TaskRunner pid=862757)[0m [extra_info] {'format_reward': 0.0, 'answer_reward': 1.0}
[36m(TaskRunner pid=862757)[0m ("Initial validation metrics: {'val-core/jec-qa-1-multi-choice/reward/mean@1': "
[36m(TaskRunner pid=862757)[0m  'np.float64(0.9557501114040994), '
[36m(TaskRunner pid=862757)[0m  "'val-aux/jec-qa-1-multi-choice/reward/std@1': np.float64(0.0), "
[36m(TaskRunner pid=862757)[0m  "'val-core/jec-qa-1-multi-choice/reward/best@1/mean': "
[36m(TaskRunner pid=862757)[0m  'np.float64(0.9557501114040994), '
[36m(TaskRunner pid=862757)[0m  "'val-core/jec-qa-1-multi-choice/reward/best@1/std': np.float64(0.0), "
[36m(TaskRunner pid=862757)[0m  "'val-aux/jec-qa-1-multi-choice/reward/worst@1/mean': "
[36m(TaskRunner pid=862757)[0m  'np.float64(0.9557501114040994), '
[36m(TaskRunner pid=862757)[0m  "'val-aux/jec-qa-1-multi-choice/reward/worst@1/std': np.float64(0.0), "
[36m(TaskRunner pid=862757)[0m  "'val-aux/jec-qa-1-multi-choice/score/mean@1': "
[36m(TaskRunner pid=862757)[0m  "np.float64(0.9557501183151916), 'val-aux/jec-qa-1-multi-choice/score/std@1': "
[36m(TaskRunner pid=862757)[0m  "np.float64(0.0), 'val-aux/jec-qa-1-multi-choice/score/best@1/mean': "
[36m(TaskRunner pid=862757)[0m  'np.float64(0.9557501183151917), '
[36m(TaskRunner pid=862757)[0m  "'val-aux/jec-qa-1-multi-choice/score/best@1/std': "
[36m(TaskRunner pid=862757)[0m  'np.float64(9.470785621802389e-17), '
[36m(TaskRunner pid=862757)[0m  "'val-aux/jec-qa-1-multi-choice/score/worst@1/mean': "
[36m(TaskRunner pid=862757)[0m  'np.float64(0.9557501183151917), '
[36m(TaskRunner pid=862757)[0m  "'val-aux/jec-qa-1-multi-choice/score/worst@1/std': "
[36m(TaskRunner pid=862757)[0m  'np.float64(9.470785621802389e-17), '
[36m(TaskRunner pid=862757)[0m  "'val-aux/jec-qa-1-multi-choice/extra_info/score@1': np.float64(0.0), "
[36m(TaskRunner pid=862757)[0m  "'val-aux/jec-qa-1-multi-choice/extra_info/score/std@1': np.float64(0.0)}")
[36m(TaskRunner pid=862757)[0m step:0 - val-core/jec-qa-1-multi-choice/reward/mean@1:0.956 - val-aux/jec-qa-1-multi-choice/reward/std@1:0.000 - val-core/jec-qa-1-multi-choice/reward/best@1/mean:0.956 - val-core/jec-qa-1-multi-choice/reward/best@1/std:0.000 - val-aux/jec-qa-1-multi-choice/reward/worst@1/mean:0.956 - val-aux/jec-qa-1-multi-choice/reward/worst@1/std:0.000 - val-aux/jec-qa-1-multi-choice/score/mean@1:0.956 - val-aux/jec-qa-1-multi-choice/score/std@1:0.000 - val-aux/jec-qa-1-multi-choice/score/best@1/mean:0.956 - val-aux/jec-qa-1-multi-choice/score/best@1/std:0.000 - val-aux/jec-qa-1-multi-choice/score/worst@1/mean:0.956 - val-aux/jec-qa-1-multi-choice/score/worst@1/std:0.000 - val-aux/jec-qa-1-multi-choice/extra_info/score@1:0.000 - val-aux/jec-qa-1-multi-choice/extra_info/score/std@1:0.000
[36m(TaskRunner pid=862757)[0m list(reward_extra_infos_dict.keys())=['score', 'extra_info']
[36m(TaskRunner pid=862757)[0m step:1 - global_seqlen/min:57077.000 - global_seqlen/max:61927.000 - global_seqlen/minmax_diff:4850.000 - global_seqlen/balanced_min:59187.000 - global_seqlen/balanced_max:59188.000 - global_seqlen/mean:59187.375 - actor/entropy_loss:1.193 - actor/kl_loss:0.001 - actor/kl_coef:0.001 - actor/pg_loss:0.109 - actor/pg_clipfrac:0.001 - actor/ppo_kl:0.000 - actor/pg_clipfrac_lower:0.000 - actor/grad_norm:2.156 - perf/mfu/actor:0.472 - perf/max_memory_allocated_gb:58.209 - perf/max_memory_reserved_gb:63.418 - perf/cpu_memory_used_gb:52.398 - actor/lr:0.000 - critic/score/mean:0.861 - critic/score/max:2.000 - critic/score/min:0.000 - critic/rewards/mean:0.861 - critic/rewards/max:2.000 - critic/rewards/min:0.000 - critic/advantages/mean:-0.011 - critic/advantages/max:2.041 - critic/advantages/min:-2.041 - critic/returns/mean:-0.011 - critic/returns/max:2.041 - critic/returns/min:-2.041 - response_length/mean:312.270 - response_length/max:834.000 - response_length/min:103.000 - response_length/clip_ratio:0.000 - prompt_length/mean:304.266 - prompt_length/max:471.000 - prompt_length/min:209.000 - prompt_length/clip_ratio:0.000 - timing_s/gen:24.353 - timing_s/old_log_prob:6.321 - timing_s/ref:10.742 - timing_s/adv:0.322 - timing_s/update_actor:32.220 - timing_s/step:73.979 - timing_per_token_ms/ref:0.023 - timing_per_token_ms/adv:0.001 - timing_per_token_ms/gen:0.102 - timing_per_token_ms/update_actor:0.068 - perf/total_num_tokens:473499.000 - perf/time_per_step:73.979 - perf/throughput:800.055
[36m(TaskRunner pid=862757)[0m list(reward_extra_infos_dict.keys())=['score', 'extra_info']
Error executing job with overrides: ['algorithm.adv_estimator=grpo', 'data.train_files=/home/wangyc/verl/data/jec-qa-1-multi-choice/train.parquet', 'data.val_files=/home/wangyc/verl/data/jec-qa-1-multi-choice/test.parquet', 'data.train_batch_size=128', 'data.val_batch_size=1312', 'data.max_prompt_length=1024', 'data.max_response_length=1024', 'actor_rollout_ref.model.path=/home/wangyc/verl/Qwen/Qwen2___5-7B-Instruct', 'actor_rollout_ref.actor.optim.lr=1e-6', 'actor_rollout_ref.model.use_remove_padding=True', 'actor_rollout_ref.actor.ppo_mini_batch_size=64', 'actor_rollout_ref.actor.ppo_micro_batch_size_per_gpu=32', 'actor_rollout_ref.actor.use_kl_loss=True', 'actor_rollout_ref.actor.kl_loss_coef=0.001', 'actor_rollout_ref.actor.kl_loss_type=low_var_kl', 'actor_rollout_ref.model.enable_gradient_checkpointing=True', 'actor_rollout_ref.actor.fsdp_config.param_offload=False', 'actor_rollout_ref.actor.fsdp_config.optimizer_offload=False', 'actor_rollout_ref.rollout.log_prob_micro_batch_size_per_gpu=64', 'actor_rollout_ref.rollout.tensor_model_parallel_size=2', 'actor_rollout_ref.rollout.name=vllm', 'actor_rollout_ref.rollout.gpu_memory_utilization=0.75', 'actor_rollout_ref.rollout.n=6', 'actor_rollout_ref.ref.log_prob_micro_batch_size_per_gpu=64', 'actor_rollout_ref.ref.fsdp_config.param_offload=True', 'algorithm.kl_ctrl.kl_coef=0.001', 'trainer.critic_warmup=0', "trainer.logger=['console', 'wandb']", 'trainer.project_name=Lawyer-Zero', 'trainer.experiment_name=qwen2.5-7b-grpo-mcq', 'trainer.n_gpus_per_node=8', 'trainer.nnodes=1', 'trainer.default_local_dir=checkpoints/qwen2.5-7b-grpo-hard-mcq', 'trainer.save_freq=50', 'trainer.test_freq=10', 'trainer.total_epochs=2']
Traceback (most recent call last):
  File "/home/wangyc/verl/verl/trainer/main_ppo.py", line 63, in main
    run_ppo(config)
  File "/home/wangyc/verl/verl/trainer/main_ppo.py", line 80, in run_ppo
    ray.get(runner.run.remote(config))
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/ray/_private/worker.py", line 2771, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/ray/_private/worker.py", line 919, in get_objects
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError(OutOfMemoryError): [36mray::TaskRunner.run()[39m (pid=862757, ip=222.29.51.203, actor_id=3ca57d63b1ba7b9bcc42976001000000, repr=<main_ppo.TaskRunner object at 0x7f35e402f190>)
  File "/home/wangyc/verl/verl/trainer/main_ppo.py", line 208, in run
    trainer.fit()
  File "/home/wangyc/verl/verl/trainer/ppo/ray_trainer.py", line 1048, in fit
    actor_output = self.actor_rollout_wg.update_actor(batch)
  File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 43, in func
    output = ray.get(output)
ray.exceptions.RayTaskError(OutOfMemoryError): [36mray::WorkerDict.actor_rollout_update_actor()[39m (pid=872409, ip=222.29.51.203, actor_id=435ed52b16d96a24d5daa05501000000, repr=<verl.single_controller.ray.base.WorkerDict object at 0x7f3467bb09d0>)
  File "/home/wangyc/verl/verl/single_controller/ray/base.py", line 440, in func
    return getattr(self.worker_dict[key], name)(*args, **kwargs)
  File "/home/wangyc/verl/verl/single_controller/base/decorator.py", line 413, in inner
    return func(*args, **kwargs)
  File "/home/wangyc/verl/verl/workers/fsdp_workers.py", line 514, in update_actor
    metrics = self.actor.update_policy(data=data)
  File "/home/wangyc/verl/verl/utils/debug/performance.py", line 61, in f
    return self.log(decorated_function, *args, **kwargs)
  File "/home/wangyc/verl/verl/utils/debug/performance.py", line 70, in log
    output = func(*args, **kwargs)
  File "/home/wangyc/verl/verl/workers/actor/dp_actor.py", line 381, in update_policy
    loss.backward()
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/_tensor.py", line 626, in backward
    torch.autograd.backward(
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
  File "/home/wangyc/miniconda3/envs/verl/lib/python3.10/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 5.58 GiB. GPU 0 has a total capacity of 44.53 GiB of which 5.06 GiB is free. Including non-PyTorch memory, this process has 39.43 GiB memory in use. Of the allocated memory 53.51 GiB is allocated by PyTorch, with 143.22 MiB allocated in private pools (e.g., CUDA Graphs), and 4.95 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
